{
  "src/lib/components/Accordion.react.js": {
    "description": "Divide content into collapsible sections. For more information, see: https://mantine.dev/core/accordion/",
    "displayName": "Accordion",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "<AccordionItem /> components only"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "disableIconRotation": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Should icon rotation be disabled"
      },
      "icon": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Replace icon on all items"
      },
      "iconPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"right\"",
              "computed": false
            },
            {
              "value": "\"left\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Change icon position: left or right"
      },
      "iconSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Icon width in px"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "multiple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allow multiple items to be opened at the same time"
      },
      "offsetIcon": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Should icon be offset with padding, applicable only when iconPosition is left"
      },
      "order": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "1",
              "computed": false
            },
            {
              "value": "2",
              "computed": false
            },
            {
              "value": "3",
              "computed": false
            },
            {
              "value": "4",
              "computed": false
            },
            {
              "value": "5",
              "computed": false
            },
            {
              "value": "6",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Heading level used for items"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "state": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "bool"
          }
        },
        "required": false,
        "description": "Controlled state (controls opened state of accordion items)"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style"
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Open/close item transition duration in ms"
      }
    }
  },
  "src/lib/components/AccordionItem.react.js": {
    "description": "Utility component to be passed to Accordion. For more information, see: https://mantine.dev/core/accordion/",
    "displayName": "AccordionItem",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Accordion content"
      },
      "icon": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Icon"
      },
      "label": {
        "type": {
          "name": "any"
        },
        "required": true,
        "description": "Accordion label"
      }
    }
  },
  "src/lib/components/ActionIcon.react.js": {
    "description": "Icon ActionIcon to indicate secondary action. For more information, see: https://mantine.dev/core/action-icon/",
    "displayName": "ActionIcon",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Primary content"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "ActionIcon color from theme"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "loaderProps": {
        "type": {
          "name": "exact",
          "value": {
            "color": {
              "name": "enum",
              "value": [
                {
                  "value": "\"dark\"",
                  "computed": false
                },
                {
                  "value": "\"gray\"",
                  "computed": false
                },
                {
                  "value": "\"red\"",
                  "computed": false
                },
                {
                  "value": "\"pink\"",
                  "computed": false
                },
                {
                  "value": "\"grape\"",
                  "computed": false
                },
                {
                  "value": "\"violet\"",
                  "computed": false
                },
                {
                  "value": "\"indigo\"",
                  "computed": false
                },
                {
                  "value": "\"blue\"",
                  "computed": false
                },
                {
                  "value": "\"cyan\"",
                  "computed": false
                },
                {
                  "value": "\"teal\"",
                  "computed": false
                },
                {
                  "value": "\"green\"",
                  "computed": false
                },
                {
                  "value": "\"lime\"",
                  "computed": false
                },
                {
                  "value": "\"yellow\"",
                  "computed": false
                },
                {
                  "value": "\"orange\"",
                  "computed": false
                }
              ],
              "description": "Loader color from theme",
              "required": false
            },
            "size": {
              "name": "union",
              "value": [
                {
                  "name": "enum",
                  "value": [
                    {
                      "value": "\"xs\"",
                      "computed": false
                    },
                    {
                      "value": "\"sm\"",
                      "computed": false
                    },
                    {
                      "value": "\"md\"",
                      "computed": false
                    },
                    {
                      "value": "\"lg\"",
                      "computed": false
                    },
                    {
                      "value": "\"xl\"",
                      "computed": false
                    }
                  ]
                },
                {
                  "name": "number"
                }
              ],
              "description": "Defines width of loader",
              "required": false
            },
            "variant": {
              "name": "enum",
              "value": [
                {
                  "value": "\"bars\"",
                  "computed": false
                },
                {
                  "value": "\"oval\"",
                  "computed": false
                },
                {
                  "value": "\"dots\"",
                  "computed": false
                }
              ],
              "description": "Loader appearance",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Props spread to Loader component"
      },
      "loading": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicate loading state",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times that this element has been clicked on",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "ActionIcon border-radius from theme or number to set border-radius in px"
      },
      "size": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Predefined ActionIcon size"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"transparent\"",
              "computed": false
            },
            {
              "value": "\"default\"",
              "computed": false
            },
            {
              "value": "\"hover\"",
              "computed": false
            },
            {
              "value": "\"filled\"",
              "computed": false
            },
            {
              "value": "\"light\"",
              "computed": false
            },
            {
              "value": "\"gradient\"",
              "computed": false
            },
            {
              "value": "\"outline\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Controls ActionIcon appearance"
      }
    }
  },
  "src/lib/components/Affix.react.js": {
    "description": "Render react node inside portal at fixed position. For more information, see: https://mantine.dev/core/affix/",
    "displayName": "Affix",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Any react node that should trigger tooltip"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "position": {
        "type": {
          "name": "exact",
          "value": {
            "top": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "string"
                }
              ],
              "required": false
            },
            "left": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "string"
                }
              ],
              "required": false
            },
            "bottom": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "string"
                }
              ],
              "required": false
            },
            "right": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "string"
                }
              ],
              "required": false
            }
          }
        },
        "required": false,
        "description": "Fixed position in px"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "zIndex": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Root element z-index property"
      }
    }
  },
  "src/lib/components/Alert.react.js": {
    "description": "Attract user attention with important static message. For more information, see: https://mantine.dev/core/alert/",
    "displayName": "Alert",
    "methods": [],
    "props": {
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Alert message"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Alert title and line colors from theme"
      },
      "duration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Duration in milliseconds after which the Alert dismisses itself."
      },
      "hide": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to hide the alert",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "icon": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Icon displayed next to title"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Radius from theme.radius, or number to set border-radius in px"
      },
      "title": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Optional alert title"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"filled\"",
              "computed": false
            },
            {
              "value": "\"outline\"",
              "computed": false
            },
            {
              "value": "\"light\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Controls Alert background, color and border styles",
        "defaultValue": {
          "value": "\"light\"",
          "computed": false
        }
      },
      "withCloseButton": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display close button"
      }
    }
  },
  "src/lib/components/Anchor.react.js": {
    "description": "Display links with theme styles. For more information, see: https://mantine.dev/core/anchor/",
    "displayName": "Anchor",
    "methods": [],
    "props": {
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"right\"",
              "computed": false
            },
            {
              "value": "\"center\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Sets text-align css property"
      },
      "children": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Primary content"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Text color from theme"
      },
      "gradient": {
        "type": {
          "name": "exact",
          "value": {
            "from": {
              "name": "string",
              "required": true
            },
            "to": {
              "name": "string",
              "required": true
            },
            "deg": {
              "name": "number",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Controls gradient settings in gradient variant only"
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "href"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "inherit": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Inherit font properties from parent element"
      },
      "inline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Sets line-height to 1 for centering"
      },
      "lineClamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "CSS -webkit-line-clamp property"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Predefined font-size from theme.fontSizes"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "target": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"_blank\"",
              "computed": false
            },
            {
              "value": "\"_self\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Target"
      },
      "transform": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"capitalize\"",
              "computed": false
            },
            {
              "value": "\"uppercase\"",
              "computed": false
            },
            {
              "value": "\"lowercase\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Sets text-transform css property"
      },
      "underline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Underline the text"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"link\"",
              "computed": false
            },
            {
              "value": "\"gradient\"",
              "computed": false
            },
            {
              "value": "\"text\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Link or text variant"
      },
      "weight": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"normal\"",
                  "computed": false
                },
                {
                  "value": "\"bold\"",
                  "computed": false
                },
                {
                  "value": "\"bolder\"",
                  "computed": false
                },
                {
                  "value": "\"lighter\"",
                  "computed": false
                },
                {
                  "value": "\"initial\"",
                  "computed": false
                },
                {
                  "value": "\"inherit\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Sets font-weight css property"
      }
    }
  },
  "src/lib/components/Avatar.react.js": {
    "description": "Display user profile image, initials or fallback icon. For more information, see: https://mantine.dev/core/avatar/",
    "displayName": "Avatar",
    "methods": [],
    "props": {
      "alt": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Image alt text or title for placeholder variant"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Custom placeholder"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Color from theme.colors used for letter and icon placeholders"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Value from theme.radius or number to set border-radius in px"
      },
      "size": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Avatar width and height"
      },
      "src": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Image url"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      }
    }
  },
  "src/lib/components/AvatarsGroup.react.js": {
    "description": "Display user profile image, initials or fallback icon. For more information, see: https://mantine.dev/core/avatar/",
    "displayName": "AvatarsGroup",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "<Avatar /> components only"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "limit": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Maximum amount of <Avatar /> components rendered, everything after limit is truncated"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Child <Avatar /> radius"
      },
      "size": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Child <Avatar /> components width and height"
      },
      "spacing": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Spacing between avatars"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "total": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Total number of child <Avatar />, overrides the truncated amount"
      }
    }
  },
  "src/lib/components/BackgroundImage.react.js": {
    "description": "Use when you need to display image below any content. For more information, see: https://mantine.dev/core/image/",
    "displayName": "BackgroundImage",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Contents"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Predefined border-radius value from theme.radius or number for border-radius in px"
      },
      "src": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Image src"
      }
    }
  },
  "src/lib/components/Badge.react.js": {
    "description": "Display badge, pill or tag. For more information, see: https://mantine.dev/core/badge/",
    "displayName": "Badge",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Primary content"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Badge color from theme"
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Sets badge width to 100% of parent element, hides overflow text with text-overflow: ellipsis"
      },
      "gradient": {
        "type": {
          "name": "exact",
          "value": {
            "from": {
              "name": "string",
              "required": true
            },
            "to": {
              "name": "string",
              "required": true
            },
            "deg": {
              "name": "number",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Controls gradient settings in gradient variant only"
      },
      "leftSection": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Section rendered on the left side of label"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Predefined border-radius value from theme.radius or number for border-radius in px"
      },
      "rightSection": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Section rendered on the right side of label"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Predefined badge size"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"light\"",
              "computed": false
            },
            {
              "value": "\"filled\"",
              "computed": false
            },
            {
              "value": "\"outline\"",
              "computed": false
            },
            {
              "value": "\"dot\"",
              "computed": false
            },
            {
              "value": "\"gradient\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Controls badge background, color and border styles"
      }
    }
  },
  "src/lib/components/Blockquote.react.js": {
    "description": "Blockquote with optional cite. For more information, see: https://mantine.dev/core/blockquote/",
    "displayName": "Blockquote",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Primary content"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "cite": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Describe a reference to a cited quote"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Badge color from theme"
      },
      "icon": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Icon, defaults to quote icon"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      }
    }
  },
  "src/lib/components/Breadcrumbs.react.js": {
    "description": "Separate list of react nodes with given separator. For more information, see: https://mantine.dev/core/breadcrumbs/",
    "displayName": "Breadcrumbs",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "React nodes that should be separated"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "separator": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Separator between breadcrumbs"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      }
    }
  },
  "src/lib/components/Button.react.js": {
    "description": "Render button or link with button styles from mantine theme. For more information, see: https://mantine.dev/core/button/",
    "displayName": "Button",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Primary content"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Button color from theme"
      },
      "compact": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Reduces vertical and horizontal spacing"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "The component can show it is currently unable to be interacted with"
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Sets button width to 100% of parent element"
      },
      "gradient": {
        "type": {
          "name": "exact",
          "value": {
            "from": {
              "name": "string",
              "required": true
            },
            "to": {
              "name": "string",
              "required": true
            },
            "deg": {
              "name": "number",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Controls gradient settings in gradient variant only"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "leftIcon": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Adds icon before button label"
      },
      "loaderPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"right\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Loader position relative to button label"
      },
      "loaderProps": {
        "type": {
          "name": "exact",
          "value": {
            "color": {
              "name": "enum",
              "value": [
                {
                  "value": "\"dark\"",
                  "computed": false
                },
                {
                  "value": "\"gray\"",
                  "computed": false
                },
                {
                  "value": "\"red\"",
                  "computed": false
                },
                {
                  "value": "\"pink\"",
                  "computed": false
                },
                {
                  "value": "\"grape\"",
                  "computed": false
                },
                {
                  "value": "\"violet\"",
                  "computed": false
                },
                {
                  "value": "\"indigo\"",
                  "computed": false
                },
                {
                  "value": "\"blue\"",
                  "computed": false
                },
                {
                  "value": "\"cyan\"",
                  "computed": false
                },
                {
                  "value": "\"teal\"",
                  "computed": false
                },
                {
                  "value": "\"green\"",
                  "computed": false
                },
                {
                  "value": "\"lime\"",
                  "computed": false
                },
                {
                  "value": "\"yellow\"",
                  "computed": false
                },
                {
                  "value": "\"orange\"",
                  "computed": false
                }
              ],
              "description": "Loader color from theme",
              "required": false
            },
            "size": {
              "name": "union",
              "value": [
                {
                  "name": "enum",
                  "value": [
                    {
                      "value": "\"xs\"",
                      "computed": false
                    },
                    {
                      "value": "\"sm\"",
                      "computed": false
                    },
                    {
                      "value": "\"md\"",
                      "computed": false
                    },
                    {
                      "value": "\"lg\"",
                      "computed": false
                    },
                    {
                      "value": "\"xl\"",
                      "computed": false
                    }
                  ]
                },
                {
                  "name": "number"
                }
              ],
              "description": "Defines width of loader",
              "required": false
            },
            "variant": {
              "name": "enum",
              "value": [
                {
                  "value": "\"bars\"",
                  "computed": false
                },
                {
                  "value": "\"oval\"",
                  "computed": false
                },
                {
                  "value": "\"dots\"",
                  "computed": false
                }
              ],
              "description": "Loader appearance",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Props spread to Loader component"
      },
      "loading": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicate loading state",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times that this element has been clicked on",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Button border-radius from theme or number to set border-radius in px"
      },
      "rightIcon": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Adds icon after button label"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Predefined button size"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "uppercase": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set text-transform to uppercase"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"link\"",
              "computed": false
            },
            {
              "value": "\"filled\"",
              "computed": false
            },
            {
              "value": "\"outline\"",
              "computed": false
            },
            {
              "value": "\"light\"",
              "computed": false
            },
            {
              "value": "\"gradient\"",
              "computed": false
            },
            {
              "value": "\"white\"",
              "computed": false
            },
            {
              "value": "\"subtle\"",
              "computed": false
            },
            {
              "value": "\"default\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Controls button appearance"
      }
    }
  },
  "src/lib/components/Center.react.js": {
    "description": "Centers content vertically and horizontally. For more information, see: https://mantine.dev/core/center/",
    "displayName": "Center",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Content that should be centered vertically and horizontally"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "m": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "my": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "mx": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "mt": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "mb": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "ml": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "mr": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "p": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "py": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "px": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "pt": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "pb": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "pl": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "pr": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      }
    }
  },
  "src/lib/components/Checkbox.react.js": {
    "description": "Capture boolean input from user. For more information, see: https://mantine.dev/core/checkbox/",
    "displayName": "Checkbox",
    "methods": [],
    "props": {
      "checked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "State of check box",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Checkbox color"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "A checkbox can show it is currently unable to be interacted with"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Checkbox label"
      },
      "persistence": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If `persisted` is truthy and\nhasn't changed from its previous value, a `value` that the user has\nchanged while using the app will keep that change, as long as\nthe new `value` also matches what was given originally.\nUsed in conjunction with `persistence_type`."
      },
      "persisted_props": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "enum",
            "value": [
              {
                "value": "\"checked\"",
                "computed": false
              }
            ]
          }
        },
        "required": false,
        "description": "Properties whose user interactions will persist after refreshing the\ncomponent or the page.",
        "defaultValue": {
          "value": "[\"checked\"]",
          "computed": false
        }
      },
      "persistence_type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"local\"",
              "computed": false
            },
            {
              "value": "\"session\"",
              "computed": false
            },
            {
              "value": "\"memory\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.",
        "defaultValue": {
          "value": "\"local\"",
          "computed": false
        }
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Radius from theme.radius, or number to set border-radius in px"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Predefined label font-size and checkbox width and height in px"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Check/uncheck transition duration, set to 0 to disable all transitions"
      }
    }
  },
  "src/lib/components/Chips.react.js": {
    "description": "Alternative to Select and RadioGroup. For more information, see: https://mantine.dev/core/chips/",
    "displayName": "Chips",
    "methods": [],
    "props": {
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"stretch\"",
              "computed": false
            },
            {
              "value": "\"center\"",
              "computed": false
            },
            {
              "value": "\"flex-end\"",
              "computed": false
            },
            {
              "value": "\"flex-start\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines align-items css property"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Active chip color, defaults to theme.primaryColor"
      },
      "data": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "exact",
            "value": {
              "label": {
                "name": "string",
                "description": "The option's label",
                "required": true
              },
              "value": {
                "name": "string",
                "description": "Option's value",
                "required": true
              },
              "disabled": {
                "name": "bool",
                "description": "If true, this option is disabled and cannot be selected",
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "Chips"
      },
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"row\"",
              "computed": false
            },
            {
              "value": "\"column\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines flex-direction property, row for horizontal, column for vertical"
      },
      "grow": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Defines flex-grow property for each element, true -> 1, false -> 0"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "multiple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allow multiple values to be picked"
      },
      "noWrap": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Defined flex-wrap property"
      },
      "persistence": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If `persisted` is truthy and\nhasn't changed from its previous value, a `value` that the user has\nchanged while using the app will keep that change, as long as\nthe new `value` also matches what was given originally.\nUsed in conjunction with `persistence_type`."
      },
      "persisted_props": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "enum",
            "value": [
              {
                "value": "\"value\"",
                "computed": false
              }
            ]
          }
        },
        "required": false,
        "description": "Properties whose user interactions will persist after refreshing the\ncomponent or the page.",
        "defaultValue": {
          "value": "[\"value\"]",
          "computed": false
        }
      },
      "persistence_type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"local\"",
              "computed": false
            },
            {
              "value": "\"session\"",
              "computed": false
            },
            {
              "value": "\"memory\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.",
        "defaultValue": {
          "value": "\"local\"",
          "computed": false
        }
      },
      "position": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"right\"",
              "computed": false
            },
            {
              "value": "\"center\"",
              "computed": false
            },
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"apart\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines justify-content property"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Chip border-radius from theme or number to set value in px"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Predefined chip size"
      },
      "spacing": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Spacing between chips from theme or number to set value in px"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "string"
              }
            }
          ]
        },
        "required": false,
        "description": "Controlled component value"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"outline\"",
              "computed": false
            },
            {
              "value": "\"filled\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Controls chip appearance, defaults to filled with dark theme and to outline in light theme"
      }
    }
  },
  "src/lib/components/Code.react.js": {
    "description": "Inline or block code without syntax highlight. For more information, see: https://mantine.dev/core/code/",
    "displayName": "Code",
    "methods": [],
    "props": {
      "block": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "True for code block, false for inline code"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Code content"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Code color and background from theme, defaults to gray in light theme and to dark in dark theme"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      }
    }
  },
  "src/lib/components/Col.react.js": {
    "description": "Utility component to pass to Grid. For more information, see: https://mantine.dev/core/grid/",
    "displayName": "Col",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Col content"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "gutter": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Space between columns from theme, or number to set value in px, controlled by Grid component"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "offset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Column left offset"
      },
      "offsetXs": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Column left offset at (min-width: theme.breakpoints.xs)"
      },
      "offsetSm": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Column left offset at (min-width: theme.breakpoints.sm)"
      },
      "offsetMd": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Column left offset at (min-width: theme.breakpoints.md)"
      },
      "offsetLg": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Column left offset at (min-width: theme.breakpoints.lg)"
      },
      "offsetXl": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Column left offset at (min-width: theme.breakpoints.xl)"
      },
      "span": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Default col span"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "xs": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Col span at (min-width: theme.breakpoints.xs)"
      },
      "sm": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Col span at (min-width: theme.breakpoints.sm)"
      },
      "md": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Col span at (min-width: theme.breakpoints.md)"
      },
      "lg": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Col span at (min-width: theme.breakpoints.lg)"
      },
      "xl": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Col span at (min-width: theme.breakpoints.xl)"
      }
    }
  },
  "src/lib/components/ColorPicker.react.js": {
    "description": "Alternative to Select and RadioGroup. For more information, see: https://mantine.dev/core/ColorPicker/",
    "displayName": "ColorPicker",
    "methods": [],
    "props": {
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "focusable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Should interactive elements be focusable"
      },
      "format": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"hex\"",
              "computed": false
            },
            {
              "value": "\"rgba\"",
              "computed": false
            },
            {
              "value": "\"rgb\"",
              "computed": false
            },
            {
              "value": "\"hsl\"",
              "computed": false
            },
            {
              "value": "\"hsla\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Color format"
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Force picker to take 100% width of its container"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "persistence": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If `persisted` is truthy and\nhasn't changed from its previous value, a `value` that the user has\nchanged while using the app will keep that change, as long as\nthe new `value` also matches what was given originally.\nUsed in conjunction with `persistence_type`."
      },
      "persisted_props": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "enum",
            "value": [
              {
                "value": "\"value\"",
                "computed": false
              }
            ]
          }
        },
        "required": false,
        "description": "Properties whose user interactions will persist after refreshing the\ncomponent or the page.",
        "defaultValue": {
          "value": "[\"value\"]",
          "computed": false
        }
      },
      "persistence_type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"local\"",
              "computed": false
            },
            {
              "value": "\"session\"",
              "computed": false
            },
            {
              "value": "\"memory\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.",
        "defaultValue": {
          "value": "\"local\"",
          "computed": false
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Predefined component size"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "swatches": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "Predefined colors"
      },
      "swatchesPerRow": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of swatches displayed in one row"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Controlled component value"
      },
      "withPicker": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set to false to display swatches only"
      }
    }
  },
  "src/lib/components/Container.react.js": {
    "description": "Center content horizontally with predefined max-width. For more information, see: https://mantine.dev/core/container/",
    "displayName": "Container",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Content that should be centered vertically and horizontally"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "fluid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If fluid is set to true, size prop is ignored and Container always take 100% of width"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "size": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Predefined container max-width or number for max-width in px"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "m": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "my": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "mx": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "mt": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "mb": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "ml": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "mr": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "p": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "py": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "px": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "pt": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "pb": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "pl": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "pr": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      }
    }
  },
  "src/lib/components/DatePicker.react.js": {
    "description": "Capture date input from user. For more information, see: https://mantine.dev/dates/date-picker/",
    "displayName": "DatePicker",
    "methods": [],
    "props": {
      "allowFreeInput": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allow free input"
      },
      "allowLevelChange": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allow to change level (date \u2013 month \u2013 year)"
      },
      "amountOfMonths": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Amount of displayed months"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "clearable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allow to clear value"
      },
      "closeCalendarOnChange": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set to false to force dropdown to stay open after date was selected"
      },
      "closeDropdownOnScroll": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set to true to disable dropdown closing on scroll"
      },
      "description": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Input description, displayed after label"
      },
      "disableOutsideEvents": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "When true dates that are outside of given month cannot be clicked or focused"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "A Datepicker can show it is currently unable to be interacted with"
      },
      "dropdownType": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"modal\"",
              "computed": false
            },
            {
              "value": "\"popover\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Where to show calendar in modal or popover"
      },
      "error": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Displays error message after input"
      },
      "firstDayOfWeek": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"sunday\"",
              "computed": false
            },
            {
              "value": "\"monday\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Set first day of the week"
      },
      "fixOnBlur": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "call onChange with last valid value onBlur"
      },
      "focusable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Should focusable days have tabIndex={0}?"
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set to true to make calendar take 100% of container width"
      },
      "hideOutsideDates": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Remove outside dates"
      },
      "hideWeekdays": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set to false to remove weekdays row"
      },
      "icon": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Adds icon on the left side of input"
      },
      "iconWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of icon section in px"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "initialLevel": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"date\"",
              "computed": false
            },
            {
              "value": "\"month\"",
              "computed": false
            },
            {
              "value": "\"year\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Initial date selection level"
      },
      "initialMonth": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Initial selected month"
      },
      "initiallyOpened": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Control initial dropdown opened state"
      },
      "inputFormat": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "dayjs input format"
      },
      "invalid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Sets border color to red and aria-invalid=true on input element"
      },
      "label": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Input label, displayed before input"
      },
      "locale": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Locale used for all labels formatting"
      },
      "maxDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Maximum possible date"
      },
      "minDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Minimum possible date"
      },
      "modalZIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Modal z-index"
      },
      "multiline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Will input have multiple lines?"
      },
      "persistence": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If `persisted` is truthy and\nhasn't changed from its previous value, a `value` that the user has\nchanged while using the app will keep that change, as long as\nthe new `value` also matches what was given originally.\nUsed in conjunction with `persistence_type`."
      },
      "persisted_props": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "enum",
            "value": [
              {
                "value": "\"value\"",
                "computed": false
              }
            ]
          }
        },
        "required": false,
        "description": "Properties whose user interactions will persist after refreshing the\ncomponent or the page.",
        "defaultValue": {
          "value": "[\"value\"]",
          "computed": false
        }
      },
      "persistence_type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"local\"",
              "computed": false
            },
            {
              "value": "\"session\"",
              "computed": false
            },
            {
              "value": "\"memory\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.",
        "defaultValue": {
          "value": "\"local\"",
          "computed": false
        }
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Placeholder, displayed when date is not selected"
      },
      "preventFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Prevent focusing upon clicking"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Input border-radius from theme or number to set border-radius in px"
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Adds red asterisk on the right side of label"
      },
      "rightSection": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Right section of input, similar to icon but on the right"
      },
      "rightSectionWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of right section, is used to calculate input padding-right"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "shadow": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Dropdown shadow from theme or css value for custom box-shadow"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Input size"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "transition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"fade\"",
              "computed": false
            },
            {
              "value": "\"skew-up\"",
              "computed": false
            },
            {
              "value": "\"skew-down\"",
              "computed": false
            },
            {
              "value": "\"rotate-right\"",
              "computed": false
            },
            {
              "value": "\"rotate-left\"",
              "computed": false
            },
            {
              "value": "\"slide-down\"",
              "computed": false
            },
            {
              "value": "\"slide-up\"",
              "computed": false
            },
            {
              "value": "\"slide-right\"",
              "computed": false
            },
            {
              "value": "\"slide-left\"",
              "computed": false
            },
            {
              "value": "\"scale-y\"",
              "computed": false
            },
            {
              "value": "\"scale-x\"",
              "computed": false
            },
            {
              "value": "\"scale\"",
              "computed": false
            },
            {
              "value": "\"pop\"",
              "computed": false
            },
            {
              "value": "\"pop-top-left\"",
              "computed": false
            },
            {
              "value": "\"pop-top-right\"",
              "computed": false
            },
            {
              "value": "\"pop-bottom-left\"",
              "computed": false
            },
            {
              "value": "\"pop-bottom-right\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Dropdown appear/disappear transition"
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Dropdown appear/disappear transition duration"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Selected date"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"default\"",
              "computed": false
            },
            {
              "value": "\"filled\"",
              "computed": false
            },
            {
              "value": "\"unstyled\"",
              "computed": false
            },
            {
              "value": "\"headless\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark"
      },
      "withinPortal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to render the dropdown in a Portal"
      },
      "zIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Popper zIndex"
      }
    }
  },
  "src/lib/components/DateRangePicker.react.js": {
    "description": "Capture dates range from user. For more information, see: https://mantine.dev/dates/date-range-picker/",
    "displayName": "DateRangePicker",
    "methods": [],
    "props": {
      "allowLevelChange": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allow to change level (date \u2013 month \u2013 year)"
      },
      "allowSingleDateInRange": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allow one date to be selected as range"
      },
      "amountOfMonths": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Amount of displayed months"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "clearable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allow to clear value"
      },
      "closeCalendarOnChange": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set to false to force dropdown to stay open after date was selected"
      },
      "closeDropdownOnScroll": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set to true to disable dropdown closing on scroll"
      },
      "description": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Input description, displayed after label"
      },
      "disableOutsideEvents": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "When true dates that are outside of given month cannot be clicked or focused"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "A Datepicker can show it is currently unable to be interacted with"
      },
      "dropdownType": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"modal\"",
              "computed": false
            },
            {
              "value": "\"popover\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Where to show calendar in modal or popover"
      },
      "error": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Displays error message after input"
      },
      "firstDayOfWeek": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"sunday\"",
              "computed": false
            },
            {
              "value": "\"monday\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Set first day of the week"
      },
      "fixOnBlur": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "call onChange with last valid value onBlur"
      },
      "focusable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Should focusable days have tabIndex={0}?"
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set to true to make calendar take 100% of container width"
      },
      "hideOutsideDates": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Remove outside dates"
      },
      "hideWeekdays": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set to false to remove weekdays row"
      },
      "icon": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Adds icon on the left side of input"
      },
      "iconWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of icon section in px"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "initialLevel": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"date\"",
              "computed": false
            },
            {
              "value": "\"month\"",
              "computed": false
            },
            {
              "value": "\"year\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Initial date selection level"
      },
      "initialMonth": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Initial selected month"
      },
      "initiallyOpened": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Control initial dropdown opened state"
      },
      "inputFormat": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "dayjs input format"
      },
      "label": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Input label, displayed before input"
      },
      "labelSeparator": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Separator between dates"
      },
      "locale": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Locale used for all labels formatting"
      },
      "maxDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Maximum possible date"
      },
      "minDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Minimum possible date"
      },
      "modalZIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Modal z-index"
      },
      "multiline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Will input have multiple lines?"
      },
      "persistence": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If `persisted` is truthy and\nhasn't changed from its previous value, a `value` that the user has\nchanged while using the app will keep that change, as long as\nthe new `value` also matches what was given originally.\nUsed in conjunction with `persistence_type`."
      },
      "persisted_props": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "enum",
            "value": [
              {
                "value": "\"value\"",
                "computed": false
              }
            ]
          }
        },
        "required": false,
        "description": "Properties whose user interactions will persist after refreshing the\ncomponent or the page.",
        "defaultValue": {
          "value": "[\"value\"]",
          "computed": false
        }
      },
      "persistence_type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"local\"",
              "computed": false
            },
            {
              "value": "\"session\"",
              "computed": false
            },
            {
              "value": "\"memory\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.",
        "defaultValue": {
          "value": "\"local\"",
          "computed": false
        }
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Placeholder, displayed when date is not selected"
      },
      "preventFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Prevent focusing upon clicking"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Input border-radius from theme or number to set border-radius in px"
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Adds red asterisk on the right side of label"
      },
      "rightSection": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Right section of input, similar to icon but on the right"
      },
      "rightSectionWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of right section, is used to calculate input padding-right"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "shadow": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Dropdown shadow from theme or css value for custom box-shadow"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Input size"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "transition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"fade\"",
              "computed": false
            },
            {
              "value": "\"skew-up\"",
              "computed": false
            },
            {
              "value": "\"skew-down\"",
              "computed": false
            },
            {
              "value": "\"rotate-right\"",
              "computed": false
            },
            {
              "value": "\"rotate-left\"",
              "computed": false
            },
            {
              "value": "\"slide-down\"",
              "computed": false
            },
            {
              "value": "\"slide-up\"",
              "computed": false
            },
            {
              "value": "\"slide-right\"",
              "computed": false
            },
            {
              "value": "\"slide-left\"",
              "computed": false
            },
            {
              "value": "\"scale-y\"",
              "computed": false
            },
            {
              "value": "\"scale-x\"",
              "computed": false
            },
            {
              "value": "\"scale\"",
              "computed": false
            },
            {
              "value": "\"pop\"",
              "computed": false
            },
            {
              "value": "\"pop-top-left\"",
              "computed": false
            },
            {
              "value": "\"pop-top-right\"",
              "computed": false
            },
            {
              "value": "\"pop-bottom-left\"",
              "computed": false
            },
            {
              "value": "\"pop-bottom-right\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Dropdown appear/disappear transition"
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Dropdown appear/disappear transition duration"
      },
      "value": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "Selected dates"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"default\"",
              "computed": false
            },
            {
              "value": "\"filled\"",
              "computed": false
            },
            {
              "value": "\"unstyled\"",
              "computed": false
            },
            {
              "value": "\"headless\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark"
      },
      "withinPortal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to render the dropdown in a Portal"
      },
      "zIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Popper zIndex"
      }
    }
  },
  "src/lib/components/DemoSlider.react.js": {
    "description": "Demo slider for dmc docs. For more information, see: https://mantine.dev/core/slider/",
    "displayName": "DemoSlider",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Label for input wrapper"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Current value for controlled slider"
      }
    }
  },
  "src/lib/components/Divider.react.js": {
    "description": "Horizontal line with optional label or vertical divider. For more information, see: https://mantine.dev/core/divider/",
    "displayName": "Divider",
    "methods": [],
    "props": {
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Line color from theme, defaults to gray in light color scheme and to dark in dark color scheme"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "label": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Adds text after line in horizontal orientation"
      },
      "labelPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"right\"",
              "computed": false
            },
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"center\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Label position"
      },
      "orientation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"horizontal\"",
              "computed": false
            },
            {
              "value": "\"vertical\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Line orientation"
      },
      "size": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Sets height in horizontal orientation and width in vertical"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dashed\"",
              "computed": false
            },
            {
              "value": "\"dotted\"",
              "computed": false
            },
            {
              "value": "\"solid\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Divider borderStyle"
      }
    }
  },
  "src/lib/components/Drawer.react.js": {
    "description": "Display overlay area at any side of the screen. For more information, see: https://mantine.dev/core/drawer/",
    "displayName": "Drawer",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Drawer children components"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "closeOnClickOutside": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disable onClick trigger for outside events"
      },
      "closeOnEscape": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disable onClick trigger for escape key press"
      },
      "hideCloseButton": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Hides close button, modal still can be closed with escape key and by clicking outside"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "lockScroll": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disables scroll lock"
      },
      "opened": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true drawer is mounted to the dom",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "overlayColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Sets overlay color, defaults to theme.black in light theme and to theme.colors.dark[9] in dark theme"
      },
      "overlayOpacity": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Sets overlay opacity, defaults to 0.75 in light theme and to 0.85 in dark theme"
      },
      "padding": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Drawer body padding from theme or number for padding in px"
      },
      "position": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"right\"",
              "computed": false
            },
            {
              "value": "\"top\"",
              "computed": false
            },
            {
              "value": "\"bottom\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Drawer body position"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "shadow": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Drawer body shadow from theme or any css shadow value"
      },
      "size": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Drawer body width (right | left position) or height (top | bottom position), cannot exceed 100vh for height and 100% for width"
      },
      "title": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Drawer title, displayed in header before close button"
      },
      "transition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"fade\"",
              "computed": false
            },
            {
              "value": "\"skew-up\"",
              "computed": false
            },
            {
              "value": "\"skew-down\"",
              "computed": false
            },
            {
              "value": "\"rotate-right\"",
              "computed": false
            },
            {
              "value": "\"rotate-left\"",
              "computed": false
            },
            {
              "value": "\"slide-down\"",
              "computed": false
            },
            {
              "value": "\"slide-up\"",
              "computed": false
            },
            {
              "value": "\"slide-right\"",
              "computed": false
            },
            {
              "value": "\"slide-left\"",
              "computed": false
            },
            {
              "value": "\"scale-y\"",
              "computed": false
            },
            {
              "value": "\"scale-x\"",
              "computed": false
            },
            {
              "value": "\"scale\"",
              "computed": false
            },
            {
              "value": "\"pop\"",
              "computed": false
            },
            {
              "value": "\"pop-top-left\"",
              "computed": false
            },
            {
              "value": "\"pop-top-right\"",
              "computed": false
            },
            {
              "value": "\"pop-bottom-left\"",
              "computed": false
            },
            {
              "value": "\"pop-bottom-right\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Drawer appear and disappear transition, see Transition component for full documentation"
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Transition duration in ms"
      },
      "transitionTimingFunction": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Drawer transitionTimingFunction css property"
      },
      "trapFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disables focus trap"
      },
      "withCloseButton": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Hides close button if set to false, drawer still can be closed with escape key and by clicking outside"
      },
      "withOverlay": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Removes overlay entirely"
      },
      "zIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Popper zIndex"
      }
    }
  },
  "src/lib/components/Grid.react.js": {
    "description": "Flexbox grid system with variable amount of columns. For more information, see: https://mantine.dev/core/grid/",
    "displayName": "Grid",
    "methods": [],
    "props": {
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"stretch\"",
              "computed": false
            },
            {
              "value": "\"center\"",
              "computed": false
            },
            {
              "value": "\"flex-end\"",
              "computed": false
            },
            {
              "value": "\"flex-start\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Set grid align-content property"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Content <Col/> only"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "columns": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Amount of columns in each row"
      },
      "grow": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Should columns in the last row take 100% of grid width"
      },
      "gutter": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Spacing between columns predefined value from theme.spacing or number for gutter in px"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "justify": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"space-between\"",
              "computed": false
            },
            {
              "value": "\"space-around\"",
              "computed": false
            },
            {
              "value": "\"center\"",
              "computed": false
            },
            {
              "value": "\"flex-end\"",
              "computed": false
            },
            {
              "value": "\"flex-start\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Set grid justify-content property"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      }
    }
  },
  "src/lib/components/Group.react.js": {
    "description": "Compose elements and components in flex container. For more information, see: https://mantine.dev/core/group/",
    "displayName": "Group",
    "methods": [],
    "props": {
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"stretch\"",
              "computed": false
            },
            {
              "value": "\"center\"",
              "computed": false
            },
            {
              "value": "\"flex-end\"",
              "computed": false
            },
            {
              "value": "\"flex-start\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines align-items css property"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Primary content inside the stack"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"row\"",
              "computed": false
            },
            {
              "value": "\"column\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines flex-direction property, row for horizontal, column for vertical"
      },
      "grow": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Defines flex-grow property for each element, true -> 1, false -> 0"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "noWrap": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Defined flex-wrap property"
      },
      "position": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"right\"",
              "computed": false
            },
            {
              "value": "\"center\"",
              "computed": false
            },
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"apart\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines justify-content property"
      },
      "spacing": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Space between elements"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      }
    }
  },
  "src/lib/components/Header.react.js": {
    "description": "Header. For more information, see: https://mantine.dev/core/app-shell/",
    "displayName": "Header",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Header content"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "fixed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Changes position to fixed, controlled by AppShell component if rendered inside"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Header height"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "position": {
        "type": {
          "name": "exact",
          "value": {
            "top": {
              "name": "number",
              "required": false
            },
            "left": {
              "name": "number",
              "required": false
            },
            "bottom": {
              "name": "number",
              "required": false
            },
            "right": {
              "name": "number",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Control top, left, right or bottom position values, controlled by AppShell component if rendered inside"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "zIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "z-index"
      },
      "m": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "my": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "mx": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "mt": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "mb": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "ml": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "mr": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "p": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "py": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "px": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "pt": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "pb": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "pl": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "pr": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      }
    }
  },
  "src/lib/components/Highlight.react.js": {
    "description": "Highlight given part of a string with mark tag. For more information, see: https://mantine.dev/core/highlight/",
    "displayName": "Highlight",
    "methods": [],
    "props": {
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"right\"",
              "computed": false
            },
            {
              "value": "\"center\"",
              "computed": false
            },
            {
              "value": "\"justify\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Sets text-align css property"
      },
      "children": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Full string part of which will be highlighted"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Text color from theme"
      },
      "gradient": {
        "type": {
          "name": "exact",
          "value": {
            "from": {
              "name": "string",
              "required": true
            },
            "to": {
              "name": "string",
              "required": true
            },
            "deg": {
              "name": "number",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Controls gradient settings in gradient variant only"
      },
      "highlight": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "string"
              }
            }
          ]
        },
        "required": true,
        "description": "Substring or an array of substrings to highlight in children"
      },
      "highlightColor": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Color from theme that is used for highlighting",
        "defaultValue": {
          "value": "\"yellow\"",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "inherit": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Inherit font properties from parent element"
      },
      "inline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Sets line-height to 1 for centering"
      },
      "lineClamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "CSS -webkit-line-clamp property"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Predefined font-size from theme.fontSizes"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "transform": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"none\"",
              "computed": false
            },
            {
              "value": "\"capitalize\"",
              "computed": false
            },
            {
              "value": "\"lowercase\"",
              "computed": false
            },
            {
              "value": "\"uppercase\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Sets text-transform css property"
      },
      "underline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Underline the text"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"link\"",
              "computed": false
            },
            {
              "value": "\"text\"",
              "computed": false
            },
            {
              "value": "\"gradient\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Link or text variant"
      },
      "weight": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"normal\"",
                  "computed": false
                },
                {
                  "value": "\"bold\"",
                  "computed": false
                },
                {
                  "value": "\"bolder\"",
                  "computed": false
                },
                {
                  "value": "\"lighter\"",
                  "computed": false
                },
                {
                  "value": "\"initial\"",
                  "computed": false
                },
                {
                  "value": "\"inherit\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Sets font-weight css property"
      }
    }
  },
  "src/lib/components/Image.react.js": {
    "description": "Image with optional placeholder for loading and error state. For more information, see: https://mantine.dev/core/image/",
    "displayName": "Image",
    "methods": [],
    "props": {
      "alt": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Image alt text, used as title for placeholder if image was not loaded"
      },
      "caption": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Image figcaption, displayed bellow image"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "fit": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"cover\"",
              "computed": false
            },
            {
              "value": "\"contain\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Image object-fit property"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Image height, defaults to original image height adjusted to given width"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "placeholder": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Customize placeholder content"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Predefined border-radius value from theme.radius or number for border-radius in px"
      },
      "src": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Image src"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Image width, defaults to 100%, cannot exceed 100%"
      },
      "withPlaceholder": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Enable placeholder when image is loading and when image fails to load"
      }
    }
  },
  "src/lib/components/InputWrapper.react.js": {
    "description": "Enhance custom inputs with label, error and description. For more information, see: https://mantine.dev/core/input-wrapper/",
    "displayName": "InputWrapper",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Input that should be wrapped"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "description": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Input description, displayed after label"
      },
      "error": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Displays error message after input"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "label": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Input label, displayed before input"
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Adds red asterisk on the right side of label"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Input size"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      }
    }
  },
  "src/lib/components/JsonInput.react.js": {
    "description": "Capture json data from user. For more information, see: https://mantine.dev/core/json-input/",
    "displayName": "JsonInput",
    "methods": [],
    "props": {
      "autosize": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true textarea will grow with content until maxRows are reached"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "description": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Input description, displayed after label [PropTypes.node]"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disabled input state"
      },
      "error": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Displays error message after input [PropTypes.node]"
      },
      "formatOnBlur": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Format json on blur"
      },
      "icon": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Adds icon on the left side of input [PropTypes.node]"
      },
      "iconWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of icon section in px"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "label": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Input label, displayed before input [PropTypes.node]"
      },
      "maxRows": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Defines maxRows in autosize variant, not applicable to regular variant"
      },
      "minRows": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Defines minRows in autosize variant, not applicable to regular variant"
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Placeholder"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Input border-radius from theme or number to set border-radius in px"
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Adds red asterisk on the right side of label"
      },
      "rightSection": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Right section of input, similar to icon but on the right [PropTypes.node]"
      },
      "rightSectionWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of right section, is used to calculate input padding-right"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Input size"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "validationError": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Error message shown when json is not valid [PropTypes.node]"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Value for controlled input"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"default\"",
              "computed": false
            },
            {
              "value": "\"filled\"",
              "computed": false
            },
            {
              "value": "\"unstyled\"",
              "computed": false
            },
            {
              "value": "\"headless\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark"
      }
    }
  },
  "src/lib/components/Kbd.react.js": {
    "description": "Display keyboard button or keys combination. For more information, see: https://mantine.dev/core/kbd/",
    "displayName": "Kbd",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Keyboard key"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      }
    }
  },
  "src/lib/components/List.react.js": {
    "description": "Display ordered or unordered list, see: https://mantine.dev/core/list/",
    "displayName": "List",
    "methods": [],
    "props": {
      "center": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Center items with icon"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "<List.Item /> components only"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "icon": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Icon that should replace list item dot"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "listStyleType": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "List style type such as circle, square, upper-roman, lower-alpha, etc."
      },
      "size": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Font size from theme or number to set value in px"
      },
      "spacing": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Spacing between items from theme or number to set value in px"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"ordered\"",
              "computed": false
            },
            {
              "value": "\"unordered\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "List type: ol or ul"
      },
      "withPadding": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Include padding-left to offset list from main content"
      }
    }
  },
  "src/lib/components/ListItem.react.js": {
    "description": "Utility component to be passed to List, see: https://mantine.dev/core/list/",
    "displayName": "ListItem",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Primary content"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "icon": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Icon that should replace list item dot"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      }
    }
  },
  "src/lib/components/Loader.react.js": {
    "description": "Indicate loading state. For more information, see: https://mantine.dev/core/loader/",
    "displayName": "Loader",
    "methods": [],
    "props": {
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Loader color from theme"
      },
      "size": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Defines width of loader"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"bars\"",
              "computed": false
            },
            {
              "value": "\"oval\"",
              "computed": false
            },
            {
              "value": "\"dots\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Loader appearance"
      }
    }
  },
  "src/lib/components/LoadingOverlay.react.js": {
    "description": "Similar to dcc.Loading, overlay over given container with centered Loader from Mantine Theme. For more information, see: https://mantine.dev/core/loading-overlay/",
    "displayName": "LoadingOverlay",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Content"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "loader": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Provide custom loader"
      },
      "loaderProps": {
        "type": {
          "name": "exact",
          "value": {
            "color": {
              "name": "enum",
              "value": [
                {
                  "value": "\"dark\"",
                  "computed": false
                },
                {
                  "value": "\"gray\"",
                  "computed": false
                },
                {
                  "value": "\"red\"",
                  "computed": false
                },
                {
                  "value": "\"pink\"",
                  "computed": false
                },
                {
                  "value": "\"grape\"",
                  "computed": false
                },
                {
                  "value": "\"violet\"",
                  "computed": false
                },
                {
                  "value": "\"indigo\"",
                  "computed": false
                },
                {
                  "value": "\"blue\"",
                  "computed": false
                },
                {
                  "value": "\"cyan\"",
                  "computed": false
                },
                {
                  "value": "\"teal\"",
                  "computed": false
                },
                {
                  "value": "\"green\"",
                  "computed": false
                },
                {
                  "value": "\"lime\"",
                  "computed": false
                },
                {
                  "value": "\"yellow\"",
                  "computed": false
                },
                {
                  "value": "\"orange\"",
                  "computed": false
                }
              ],
              "description": "Loader color from theme",
              "required": false
            },
            "size": {
              "name": "union",
              "value": [
                {
                  "name": "enum",
                  "value": [
                    {
                      "value": "\"xs\"",
                      "computed": false
                    },
                    {
                      "value": "\"sm\"",
                      "computed": false
                    },
                    {
                      "value": "\"md\"",
                      "computed": false
                    },
                    {
                      "value": "\"lg\"",
                      "computed": false
                    },
                    {
                      "value": "\"xl\"",
                      "computed": false
                    }
                  ]
                },
                {
                  "name": "number"
                }
              ],
              "description": "Defines width of loader",
              "required": false
            },
            "variant": {
              "name": "enum",
              "value": [
                {
                  "value": "\"bars\"",
                  "computed": false
                },
                {
                  "value": "\"oval\"",
                  "computed": false
                },
                {
                  "value": "\"dots\"",
                  "computed": false
                }
              ],
              "description": "Loader appearance",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Loader component props"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "overlayColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Sets overlay color, defaults to theme.white in light theme and to theme.colors.dark[5] in dark theme"
      },
      "overlayOpacity": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Sets overlay opacity"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Value from theme.radius or number to set border-radius in px"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Appear and disappear animation duration"
      },
      "zIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Loading overlay z-index"
      }
    }
  },
  "src/lib/components/MantineProvider.react.js": {
    "description": "MantineProvider component allows you to change theme globally. It is not required if you decide to use default theme. For more information, see: https://mantine.dev/theming/mantine-provider/",
    "displayName": "MantineProvider",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Children"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "inherit": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "inherit from one level up MantineProvider"
      },
      "styles": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Styles"
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Theme"
      },
      "withNormalizeCSS": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Normalize CSS?"
      },
      "withGlobalStyles": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "With global styles"
      }
    }
  },
  "src/lib/components/Mark.react.js": {
    "description": "Highlight part of the text. For more information, see: https://mantine.dev/core/mark/",
    "displayName": "Mark",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Full string part of which will be highlighted"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Background color from theme.colors"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      }
    }
  },
  "src/lib/components/MediaQuery.react.js": {
    "description": "Apply styles to children if media query matches. For more information, see: https://mantine.dev/core/media-query/",
    "displayName": "MediaQuery",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Child that should be shown at given breakpoint, it must accept className prop"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "largerThan": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Styles applied to child when viewport is larger than given breakpoint"
      },
      "query": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Any other media query"
      },
      "smallerThan": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Styles applied to child when viewport is smaller than given breakpoint"
      },
      "styles": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The style that will be set if condition is met"
      }
    }
  },
  "src/lib/components/Menu.react.js": {
    "description": "Combine a list of secondary actions into single interactive area. For more information, see: https://mantine.dev/core/menu/",
    "displayName": "Menu",
    "methods": [],
    "props": {
      "arrowDistance": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Arrow distance to the left/right * arrowSize"
      },
      "arrowSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Arrow size in px"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "dmc.MenuItem, dmc.MenuLabel, and dmc.Divider components only, children are passed to MenuBody component"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "closeOnItemClick": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Should menu close on item click"
      },
      "closeOnScroll": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Close menu on scroll"
      },
      "delay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Close delay for hover trigger"
      },
      "exitTransitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Unmount transition duration in ms"
      },
      "gutter": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Spacing between element and popper in px"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "placement": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"center\"",
              "computed": false
            },
            {
              "value": "\"end\"",
              "computed": false
            },
            {
              "value": "\"start\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Placement relative to reference element"
      },
      "position": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"bottom\"",
              "computed": false
            },
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"right\"",
              "computed": false
            },
            {
              "value": "\"top\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Position relative to reference element"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Menu body and items border-radius"
      },
      "shadow": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Predefined shadow from theme or box-shadow value"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "size": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"auto\"",
                  "computed": false
                },
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Predefined menu width or number for width in px"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "transition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"fade\"",
              "computed": false
            },
            {
              "value": "\"skew-up\"",
              "computed": false
            },
            {
              "value": "\"skew-down\"",
              "computed": false
            },
            {
              "value": "\"rotate-right\"",
              "computed": false
            },
            {
              "value": "\"rotate-left\"",
              "computed": false
            },
            {
              "value": "\"slide-down\"",
              "computed": false
            },
            {
              "value": "\"slide-up\"",
              "computed": false
            },
            {
              "value": "\"slide-right\"",
              "computed": false
            },
            {
              "value": "\"slide-left\"",
              "computed": false
            },
            {
              "value": "\"scale-y\"",
              "computed": false
            },
            {
              "value": "\"scale-x\"",
              "computed": false
            },
            {
              "value": "\"scale\"",
              "computed": false
            },
            {
              "value": "\"pop\"",
              "computed": false
            },
            {
              "value": "\"pop-top-left\"",
              "computed": false
            },
            {
              "value": "\"pop-top-right\"",
              "computed": false
            },
            {
              "value": "\"pop-bottom-left\"",
              "computed": false
            },
            {
              "value": "\"pop-bottom-right\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Customize mount/unmount transition"
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Mount transition duration in ms"
      },
      "transitionTimingFunction": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Mount/unmount transition timing function, defaults to theme.transitionTimingFunction"
      },
      "trapFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Should focus be trapped when menu is opened"
      },
      "trigger": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"hover\"",
              "computed": false
            },
            {
              "value": "\"click\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Event which should open menu"
      },
      "withArrow": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Renders arrow if true"
      },
      "zIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Menu body z-index"
      }
    }
  },
  "src/lib/components/MenuItem.react.js": {
    "description": "Combine a list of secondary actions into single interactive area. For more information, see: https://mantine.dev/core/menu/",
    "displayName": "MenuItem",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Item children"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Any color from theme.colors"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Is item disabled"
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "href if MenuItem is supposed to be used as a link"
      },
      "icon": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Icon rendered on the left side of label"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times that this element has been clicked on",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "rightSection": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Any react node to render on the right side of item, for example, keyboard shortcut or badge"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "target": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"_blank\"",
              "computed": false
            },
            {
              "value": "\"_self\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Target if MenuItem is supposed to be used as a link"
      }
    }
  },
  "src/lib/components/MenuLabel.react.js": {
    "description": "Combine a list of secondary actions into single interactive area. For more information, see: https://mantine.dev/core/menu/",
    "displayName": "MenuLabel",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Primary content"
      }
    }
  },
  "src/lib/components/Modal.react.js": {
    "description": "Modal with optional header. For more information, see: https://mantine.dev/core/modal/",
    "displayName": "Modal",
    "methods": [],
    "props": {
      "centered": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Controls if modal should be centered"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Content that should be centered vertically and horizontally"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "closeOnClickOutside": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Should modal be closed when outside click was registered?"
      },
      "closeOnEscape": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Should modal be closed when escape is pressed?"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "opened": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Mounts modal if true",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "overflow": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"inside\"",
              "computed": false
            },
            {
              "value": "\"outside\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Control vertical overflow behavior"
      },
      "overlayColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Overlay below modal color, defaults to theme.black in light theme and to theme.colors.dark[9] in dark theme"
      },
      "overlayOpacity": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Overlay below modal opacity, defaults to 0.75 in light theme and to 0.85 in dark theme"
      },
      "padding": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Modal padding from theme or number value for padding in px"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Modal padding from theme or number value for padding in px"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "shadow": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Modal shadow from theme or css value"
      },
      "size": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Modal body width"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "title": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Modal title, displayed in header before close button"
      },
      "transition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"fade\"",
              "computed": false
            },
            {
              "value": "\"skew-up\"",
              "computed": false
            },
            {
              "value": "\"skew-down\"",
              "computed": false
            },
            {
              "value": "\"rotate-right\"",
              "computed": false
            },
            {
              "value": "\"rotate-left\"",
              "computed": false
            },
            {
              "value": "\"slide-down\"",
              "computed": false
            },
            {
              "value": "\"slide-up\"",
              "computed": false
            },
            {
              "value": "\"slide-right\"",
              "computed": false
            },
            {
              "value": "\"slide-left\"",
              "computed": false
            },
            {
              "value": "\"scale-y\"",
              "computed": false
            },
            {
              "value": "\"scale-x\"",
              "computed": false
            },
            {
              "value": "\"scale\"",
              "computed": false
            },
            {
              "value": "\"pop\"",
              "computed": false
            },
            {
              "value": "\"pop-top-left\"",
              "computed": false
            },
            {
              "value": "\"pop-top-right\"",
              "computed": false
            },
            {
              "value": "\"pop-bottom-left\"",
              "computed": false
            },
            {
              "value": "\"pop-bottom-right\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Modal body transition"
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Duration in ms of modal transitions, set to 0 to disable all animations"
      },
      "transitionTimingFunction": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Modal body transitionTimingFunction, defaults to theme.transitionTimingFunction"
      },
      "trapFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disables focus trap"
      },
      "withCloseButton": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Hides close button if set to false, modal still can be closed with escape key and by clicking outside"
      },
      "zIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Popper zIndex"
      }
    }
  },
  "src/lib/components/MultiSelect.react.js": {
    "description": "Custom searchable MultiSelect. For more information, see: https://mantine.dev/core/multi-select/",
    "displayName": "MultiSelect",
    "methods": [],
    "props": {
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "clearSearchOnBlur": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Clear search field value on blur"
      },
      "clearSearchOnChange": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Clear search value when item is selected"
      },
      "clearable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allow to clear value"
      },
      "creatable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allow creatable option"
      },
      "data": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "exact",
                "value": {
                  "label": {
                    "name": "string",
                    "description": "The option's label",
                    "required": false
                  },
                  "value": {
                    "name": "string",
                    "description": "Option's value",
                    "required": true
                  },
                  "disabled": {
                    "name": "bool",
                    "description": "If true, this option is disabled and cannot be selected",
                    "required": false
                  },
                  "group": {
                    "name": "string",
                    "description": "Item Groups",
                    "required": false
                  }
                }
              }
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "string"
              }
            }
          ]
        },
        "required": false,
        "description": "Select options used to renderer items in dropdown",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "description": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Input description, displayed after label"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "The component can show it is currently unable to be interacted with"
      },
      "dropdownPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"bottom\"",
              "computed": false
            },
            {
              "value": "\"top\"",
              "computed": false
            },
            {
              "value": "\"flip\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Dropdown positioning behavior"
      },
      "error": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Displays error message after input"
      },
      "icon": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Adds icon on the left side of input"
      },
      "iconWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of icon section in px"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "initiallyOpened": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Initial dropdown opened state"
      },
      "label": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Input label, displayed before input"
      },
      "limit": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Limit amount of items displayed at a time for searchable select"
      },
      "maxDropdownHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Maximum dropdown height in px"
      },
      "maxSelectedValues": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Limit amount of items selected"
      },
      "nothingFound": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Nothing found label"
      },
      "persistence": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If `persisted` is truthy and\nhasn't changed from its previous value, a `value` that the user has\nchanged while using the app will keep that change, as long as\nthe new `value` also matches what was given originally.\nUsed in conjunction with `persistence_type`."
      },
      "persisted_props": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "enum",
            "value": [
              {
                "value": "\"value\"",
                "computed": false
              }
            ]
          }
        },
        "required": false,
        "description": "Properties whose user interactions will persist after refreshing the\ncomponent or the page.",
        "defaultValue": {
          "value": "[\"value\"]",
          "computed": false
        }
      },
      "persistence_type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"local\"",
              "computed": false
            },
            {
              "value": "\"session\"",
              "computed": false
            },
            {
              "value": "\"memory\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.",
        "defaultValue": {
          "value": "\"local\"",
          "computed": false
        }
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Placeholder, displayed when date is not selected"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Input border-radius from theme or number to set border-radius in px"
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Adds red asterisk on the right side of label"
      },
      "rightSection": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Right section of input, similar to icon but on the right"
      },
      "rightSectionWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of right section, is used to calculate input padding-right"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "searchable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set to true to enable search"
      },
      "selectOnBlur": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Select highlighted item on blur"
      },
      "shadow": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Dropdown shadow from theme or any value to set box-shadow"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Input size"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "switchDirectionOnFlip": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to switch item order and keyboard navigation on dropdown position flip"
      },
      "transition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"fade\"",
              "computed": false
            },
            {
              "value": "\"skew-up\"",
              "computed": false
            },
            {
              "value": "\"skew-down\"",
              "computed": false
            },
            {
              "value": "\"rotate-right\"",
              "computed": false
            },
            {
              "value": "\"rotate-left\"",
              "computed": false
            },
            {
              "value": "\"slide-down\"",
              "computed": false
            },
            {
              "value": "\"slide-up\"",
              "computed": false
            },
            {
              "value": "\"slide-right\"",
              "computed": false
            },
            {
              "value": "\"slide-left\"",
              "computed": false
            },
            {
              "value": "\"scale-y\"",
              "computed": false
            },
            {
              "value": "\"scale-x\"",
              "computed": false
            },
            {
              "value": "\"scale\"",
              "computed": false
            },
            {
              "value": "\"pop\"",
              "computed": false
            },
            {
              "value": "\"pop-top-left\"",
              "computed": false
            },
            {
              "value": "\"pop-top-right\"",
              "computed": false
            },
            {
              "value": "\"pop-bottom-left\"",
              "computed": false
            },
            {
              "value": "\"pop-bottom-right\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Dropdown appear/disappear transition"
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Dropdown appear/disappear transition duration"
      },
      "transitionTimingFunction": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Dropdown body transition timing function, defaults to theme.transitionTimingFunction"
      },
      "value": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "Selected value"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"default\"",
              "computed": false
            },
            {
              "value": "\"filled\"",
              "computed": false
            },
            {
              "value": "\"unstyled\"",
              "computed": false
            },
            {
              "value": "\"headless\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark"
      },
      "zIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Dropdown z-index"
      }
    }
  },
  "src/lib/components/Navbar.react.js": {
    "description": "Navbar. For more information, see: https://mantine.dev/core/app-shell/",
    "displayName": "Navbar",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Navbar content"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "fixed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Changes position to fixed, controlled by AppShell component if rendered inside"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Navbar height"
      },
      "hidden": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set to true to hide breakpoint at hiddenBreakpoint"
      },
      "hiddenBreakpoint": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Breakpoint at which navbar will be hidden if hidden prop is true"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "position": {
        "type": {
          "name": "exact",
          "value": {
            "top": {
              "name": "number",
              "required": false
            },
            "left": {
              "name": "number",
              "required": false
            },
            "bottom": {
              "name": "number",
              "required": false
            },
            "right": {
              "name": "number",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Control top, left, right or bottom position values, controlled by AppShell component if rendered inside"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "width": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Navbar width with breakpoints"
      },
      "zIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "z-index"
      },
      "m": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "my": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "mx": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "mt": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "mb": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "ml": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "mr": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "p": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "py": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "px": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "pt": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "pb": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "pl": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "pr": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      }
    }
  },
  "src/lib/components/Notification.react.js": {
    "description": "Show dynamic notifications and alerts to user, part of notifications system. For more information, see: https://mantine.dev/others/notifications/",
    "displayName": "Notification",
    "methods": [],
    "props": {
      "action": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"show\"",
              "computed": false
            },
            {
              "value": "\"update\"",
              "computed": false
            },
            {
              "value": "\"hide\"",
              "computed": false
            }
          ]
        },
        "required": true,
        "description": "Action"
      },
      "autoClose": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Whether autoclose and if true then duration"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Notification line or icon color"
      },
      "disallowClose": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Removes close button"
      },
      "icon": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Notification icon, replaces color line"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "loading": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Replaces colored line or icon with Loader component"
      },
      "message": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Notification Body"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Radius from theme.radius, or number to set border-radius in px"
      },
      "title": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Notification title, displayed before body"
      }
    }
  },
  "src/lib/components/NotificationsProvider.react.js": {
    "description": "Mantine notifications system. For more information, see: https://mantine.dev/others/notifications/",
    "displayName": "NotificationsProvider",
    "methods": [],
    "props": {
      "autoClose": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "enum",
              "value": [
                {
                  "value": "false",
                  "computed": false
                }
              ]
            }
          ]
        },
        "required": false,
        "description": "Auto close timeout for all notifications, false to disable auto close, can be overwritten for individual notifications by showNotification function"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Content"
      },
      "containerWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Notification width in px, cannot exceed 100%"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "limit": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Maximum amount of notifications displayed at a time, other new notifications will be added to queue"
      },
      "notificationMaxHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Notification max-height in px, used for transitions"
      },
      "position": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"top-left\"",
              "computed": false
            },
            {
              "value": "\"top-right\"",
              "computed": false
            },
            {
              "value": "\"top-center\"",
              "computed": false
            },
            {
              "value": "\"bottom-left\"",
              "computed": false
            },
            {
              "value": "\"bottom-right\"",
              "computed": false
            },
            {
              "value": "\"bottom-center\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Notifications position"
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Notification transitions duration, 0 to turn transitions off"
      },
      "zIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Notifications container z-index"
      }
    }
  },
  "src/lib/components/NumberInput.react.js": {
    "description": "Capture number input from user. For more information, see: https://mantine.dev/core/number-input/",
    "displayName": "NumberInput",
    "methods": [],
    "props": {
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "decimalSeparator": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The decimal separator"
      },
      "description": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Input description, displayed after label"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "The component can show it is currently unable to be interacted with"
      },
      "error": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Displays error message after input"
      },
      "hideControls": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Removes increment/decrement controls"
      },
      "icon": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Adds icon on the left side of input"
      },
      "iconWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of icon section in px"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "label": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Input label, displayed before input"
      },
      "max": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Maximum possible value"
      },
      "min": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Minimal possible value"
      },
      "noClampOnBlur": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Prevent value clamp on blur"
      },
      "precision": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Amount of digits after the decimal point"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Input border-radius from theme or number to set border-radius in px"
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Adds red asterisk on the right side of label"
      },
      "rightSection": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Right section of input, similar to icon but on the right"
      },
      "rightSectionWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of right section, is used to calculate input padding-right"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Input size"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "step": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number by which value will be incremented/decremented with controls and up/down arrows"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "stepHoldDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Initial delay in milliseconds before stepping the value"
      },
      "stepHoldInterval": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Delay before stepping the value. Number of milliseconds"
      },
      "value": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Input value"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"default\"",
              "computed": false
            },
            {
              "value": "\"filled\"",
              "computed": false
            },
            {
              "value": "\"unstyled\"",
              "computed": false
            },
            {
              "value": "\"headless\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark"
      }
    }
  },
  "src/lib/components/Pagination.react.js": {
    "description": "Display active page and navigate between multiple pages. For more information, see: https://mantine.dev/core/pagination/",
    "displayName": "Pagination",
    "methods": [],
    "props": {
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"stretch\"",
              "computed": false
            },
            {
              "value": "\"center\"",
              "computed": false
            },
            {
              "value": "\"flex-end\"",
              "computed": false
            },
            {
              "value": "\"flex-start\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines align-items css property"
      },
      "boundaries": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Amount of elements visible on left/right edges"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Active item color from theme, defaults to theme.primaryColor"
      },
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"row\"",
              "computed": false
            },
            {
              "value": "\"column\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines flex-direction property, row for horizontal, column for vertical"
      },
      "grow": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Defines flex-grow property for each element, true -> 1, false -> 0"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "noWrap": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Defined flex-wrap property"
      },
      "page": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controlled active page number"
      },
      "position": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"right\"",
              "computed": false
            },
            {
              "value": "\"center\"",
              "computed": false
            },
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"apart\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines justify-content property"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Predefined item radius or number to set border-radius in px"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "siblings": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Siblings amount on left/right side of selected page"
      },
      "size": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Predefined item size or number to set width and height in px"
      },
      "spacing": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Spacing between items from theme or number to set value in px, defaults to theme.spacing.xs / 2"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style"
      },
      "total": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "Total amount of pages"
      },
      "withControls": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show/hide prev/next controls"
      },
      "withEdges": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show/hide jump to start/end controls"
      }
    }
  },
  "src/lib/components/Paper.react.js": {
    "description": "Renders white or dark background depending on color scheme. For more information, see: https://mantine.dev/core/paper/",
    "displayName": "Paper",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Paper content"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Predefined border-radius value from theme.radius or number for border-radius in px"
      },
      "shadow": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Predefined box-shadow from theme.shadows (xs, sm, md, lg, xl) or any valid css box-shadow property"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "withBorder": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Adds 1px border with theme.colors.gray[2] color in light color scheme and theme.colors.dark[6] in dark color scheme"
      },
      "m": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "my": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "mx": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "mt": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "mb": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "ml": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "mr": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Margin props"
      },
      "p": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "py": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "px": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "pt": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "pb": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "pl": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      },
      "pr": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Padding props"
      }
    }
  },
  "src/lib/components/PasswordInput.react.js": {
    "description": "Capture password from user with option to toggle visibility. For more information, see: https://mantine.dev/core/password-input/",
    "displayName": "PasswordInput",
    "methods": [],
    "props": {
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "description": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Input description, displayed after label"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "The component can show it is currently unable to be interacted with"
      },
      "error": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Displays error message after input"
      },
      "icon": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Adds icon on the left side of input"
      },
      "iconWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of icon section in px"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "label": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Input label, displayed before input"
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Placeholder, displayed when date is not selected"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Input border-radius from theme or number to set border-radius in px"
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Adds red asterisk on the right side of label"
      },
      "rightSection": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Right section of input, similar to icon but on the right"
      },
      "rightSectionWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of right section, is used to calculate input padding-right"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Input size"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"number\"",
              "computed": false
            },
            {
              "value": "\"search\"",
              "computed": false
            },
            {
              "value": "\"text\"",
              "computed": false
            },
            {
              "value": "\"tel\"",
              "computed": false
            },
            {
              "value": "\"url\"",
              "computed": false
            },
            {
              "value": "\"email\"",
              "computed": false
            },
            {
              "value": "\"password\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Input element type"
      },
      "value": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Input value",
        "defaultValue": {
          "value": "\"\"",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"default\"",
              "computed": false
            },
            {
              "value": "\"filled\"",
              "computed": false
            },
            {
              "value": "\"unstyled\"",
              "computed": false
            },
            {
              "value": "\"headless\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark"
      }
    }
  },
  "src/lib/components/Prism.react.js": {
    "description": "Code highlight with Mantine theme colors and styles. For more information, see: https://mantine.dev/others/prism/",
    "displayName": "Prism",
    "methods": [],
    "props": {
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "children": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Code which will be highlighted"
      },
      "colorScheme": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"light\"",
              "computed": false
            },
            {
              "value": "\"dark\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Force color scheme, defaults to theme.colorScheme"
      },
      "copiedLabel": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Copy button tooltip in copied state"
      },
      "copyLabel": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Copy button tooltip"
      },
      "highlightLines": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "exact",
            "value": {
              "color": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"dark\"",
                    "computed": false
                  },
                  {
                    "value": "\"gray\"",
                    "computed": false
                  },
                  {
                    "value": "\"red\"",
                    "computed": false
                  },
                  {
                    "value": "\"pink\"",
                    "computed": false
                  },
                  {
                    "value": "\"grape\"",
                    "computed": false
                  },
                  {
                    "value": "\"violet\"",
                    "computed": false
                  },
                  {
                    "value": "\"indigo\"",
                    "computed": false
                  },
                  {
                    "value": "\"blue\"",
                    "computed": false
                  },
                  {
                    "value": "\"cyan\"",
                    "computed": false
                  },
                  {
                    "value": "\"teal\"",
                    "computed": false
                  },
                  {
                    "value": "\"green\"",
                    "computed": false
                  },
                  {
                    "value": "\"lime\"",
                    "computed": false
                  },
                  {
                    "value": "\"yellow\"",
                    "computed": false
                  },
                  {
                    "value": "\"orange\"",
                    "computed": false
                  }
                ],
                "required": false
              },
              "label": {
                "name": "string",
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "Highlight line at given line number with color from theme.colors"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "language": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"markup\"",
              "computed": false
            },
            {
              "value": "\"bash\"",
              "computed": false
            },
            {
              "value": "\"clike\"",
              "computed": false
            },
            {
              "value": "\"c\"",
              "computed": false
            },
            {
              "value": "\"cpp\"",
              "computed": false
            },
            {
              "value": "\"css\"",
              "computed": false
            },
            {
              "value": "\"javascript\"",
              "computed": false
            },
            {
              "value": "\"jsx\"",
              "computed": false
            },
            {
              "value": "\"coffeescript\"",
              "computed": false
            },
            {
              "value": "\"actionscript\"",
              "computed": false
            },
            {
              "value": "\"css-extr\"",
              "computed": false
            },
            {
              "value": "\"diff\"",
              "computed": false
            },
            {
              "value": "\"git\"",
              "computed": false
            },
            {
              "value": "\"go\"",
              "computed": false
            },
            {
              "value": "\"graphql\"",
              "computed": false
            },
            {
              "value": "\"handlebars\"",
              "computed": false
            },
            {
              "value": "\"json\"",
              "computed": false
            },
            {
              "value": "\"less\"",
              "computed": false
            },
            {
              "value": "\"makefile\"",
              "computed": false
            },
            {
              "value": "\"markdown\"",
              "computed": false
            },
            {
              "value": "\"objectivec\"",
              "computed": false
            },
            {
              "value": "\"ocaml\"",
              "computed": false
            },
            {
              "value": "\"python\"",
              "computed": false
            },
            {
              "value": "\"reason\"",
              "computed": false
            },
            {
              "value": "\"sass\"",
              "computed": false
            },
            {
              "value": "\"scss\"",
              "computed": false
            },
            {
              "value": "\"sql\"",
              "computed": false
            },
            {
              "value": "\"stylus\"",
              "computed": false
            },
            {
              "value": "\"tsx\"",
              "computed": false
            },
            {
              "value": "\"typescript\"",
              "computed": false
            },
            {
              "value": "\"wasm\"",
              "computed": false
            },
            {
              "value": "\"yaml\"",
              "computed": false
            }
          ]
        },
        "required": true,
        "description": "Programming language that should be highlighted"
      },
      "noCopy": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "True to remove copy to clipboard button"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "trim": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Defines whether the code should be trimmed, defaults to true",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "withLineNumbers": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display line numbers"
      }
    }
  },
  "src/lib/components/Progress.react.js": {
    "description": "Give user feedback for status of the task. For more information, see: https://mantine.dev/core/progress/",
    "displayName": "Progress",
    "methods": [],
    "props": {
      "animate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to animate striped progress bars"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Progress color from theme"
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text to be placed inside the progress bar"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Predefined progress radius from theme.radius or number for height in px"
      },
      "sections": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "exact",
            "value": {
              "value": {
                "name": "number",
                "required": false
              },
              "color": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"dark\"",
                    "computed": false
                  },
                  {
                    "value": "\"gray\"",
                    "computed": false
                  },
                  {
                    "value": "\"red\"",
                    "computed": false
                  },
                  {
                    "value": "\"pink\"",
                    "computed": false
                  },
                  {
                    "value": "\"grape\"",
                    "computed": false
                  },
                  {
                    "value": "\"violet\"",
                    "computed": false
                  },
                  {
                    "value": "\"indigo\"",
                    "computed": false
                  },
                  {
                    "value": "\"blue\"",
                    "computed": false
                  },
                  {
                    "value": "\"cyan\"",
                    "computed": false
                  },
                  {
                    "value": "\"teal\"",
                    "computed": false
                  },
                  {
                    "value": "\"green\"",
                    "computed": false
                  },
                  {
                    "value": "\"lime\"",
                    "computed": false
                  },
                  {
                    "value": "\"yellow\"",
                    "computed": false
                  },
                  {
                    "value": "\"orange\"",
                    "computed": false
                  }
                ],
                "required": false
              },
              "label": {
                "name": "string",
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "Replaces value if present, renders multiple sections instead of single one"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Predefined progress height or number for height in px"
      },
      "striped": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Adds stripes"
      },
      "value": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Current value for controlled slider"
      }
    }
  },
  "src/lib/components/RadioGroup.react.js": {
    "description": "Capture user feedback limited to small set of options. For more information, see: https://mantine.dev/core/radio-group/",
    "displayName": "RadioGroup",
    "methods": [],
    "props": {
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Active radio color from theme.colors"
      },
      "data": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "exact",
            "value": {
              "label": {
                "name": "string",
                "description": "The option's label",
                "required": true
              },
              "value": {
                "name": "string",
                "description": "Option's value",
                "required": true
              }
            }
          }
        },
        "required": false,
        "description": "RadioGroup options"
      },
      "description": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Input description, displayed after label"
      },
      "error": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Displays error message after input"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Input label, displayed before input"
      },
      "orientation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"horizontal\"",
              "computed": false
            },
            {
              "value": "\"vertical\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Horizontal or vertical orientation"
      },
      "persistence": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If `persisted` is truthy and\nhasn't changed from its previous value, a `value` that the user has\nchanged while using the app will keep that change, as long as\nthe new `value` also matches what was given originally.\nUsed in conjunction with `persistence_type`."
      },
      "persisted_props": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "enum",
            "value": [
              {
                "value": "\"value\"",
                "computed": false
              }
            ]
          }
        },
        "required": false,
        "description": "Properties whose user interactions will persist after refreshing the\ncomponent or the page.",
        "defaultValue": {
          "value": "[\"value\"]",
          "computed": false
        }
      },
      "persistence_type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"local\"",
              "computed": false
            },
            {
              "value": "\"session\"",
              "computed": false
            },
            {
              "value": "\"memory\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.",
        "defaultValue": {
          "value": "\"local\"",
          "computed": false
        }
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Adds red asterisk on the right side of label"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Predefined label fontSize, radio width, height and border-radius"
      },
      "spacing": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Spacing between radios in horizontal variant"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Value of currently selected radio (controlled)"
      }
    }
  },
  "src/lib/components/RingProgress.react.js": {
    "description": "Give user feedback for status of the task with circle diagram. For more information, see: https://mantine.dev/core/ring-progress/",
    "displayName": "RingProgress",
    "methods": [],
    "props": {
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "label": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Label displayed in the center of the ring [PropTypes.node]"
      },
      "roundCaps": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Sets whether the edges of the progress circle are rounded"
      },
      "sections": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "exact",
            "value": {
              "value": {
                "name": "number",
                "required": true
              },
              "color": {
                "name": "union",
                "value": [
                  {
                    "name": "enum",
                    "value": [
                      {
                        "value": "\"dark\"",
                        "computed": false
                      },
                      {
                        "value": "\"gray\"",
                        "computed": false
                      },
                      {
                        "value": "\"red\"",
                        "computed": false
                      },
                      {
                        "value": "\"pink\"",
                        "computed": false
                      },
                      {
                        "value": "\"grape\"",
                        "computed": false
                      },
                      {
                        "value": "\"violet\"",
                        "computed": false
                      },
                      {
                        "value": "\"indigo\"",
                        "computed": false
                      },
                      {
                        "value": "\"blue\"",
                        "computed": false
                      },
                      {
                        "value": "\"cyan\"",
                        "computed": false
                      },
                      {
                        "value": "\"teal\"",
                        "computed": false
                      },
                      {
                        "value": "\"green\"",
                        "computed": false
                      },
                      {
                        "value": "\"lime\"",
                        "computed": false
                      },
                      {
                        "value": "\"yellow\"",
                        "computed": false
                      },
                      {
                        "value": "\"orange\"",
                        "computed": false
                      }
                    ]
                  },
                  {
                    "name": "string"
                  }
                ],
                "required": true
              }
            }
          }
        },
        "required": true,
        "description": "Ring sections"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "size": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width and height of the progress ring in px"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "thickness": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Ring thickness"
      }
    }
  },
  "src/lib/components/ScrollArea.react.js": {
    "description": "A port of the ScrollArea component. For more information, see: https://mantine.dev/core/table/",
    "displayName": "ScrollArea",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "ScrollArea children"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "dir": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"ltr\"",
              "computed": false
            },
            {
              "value": "\"rtl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Reading direction of the scroll area"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "offsetScrollbars": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Should scrollbars be offset with padding"
      },
      "scrollHideDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Scroll hide delay in ms, for scroll and hover types only"
      },
      "scrollbarSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Scrollbar size in px"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"auto\"",
              "computed": false
            },
            {
              "value": "\"scroll\"",
              "computed": false
            },
            {
              "value": "\"always\"",
              "computed": false
            },
            {
              "value": "\"hover\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Scrollbars type"
      }
    }
  },
  "src/lib/components/SegmentedControl.react.js": {
    "description": "Horizontal control made of multiple segments, alternative to RadioGroup. For more information, see: https://mantine.dev/core/segmented-control/",
    "displayName": "SegmentedControl",
    "methods": [],
    "props": {
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Active control color from theme.colors, defaults to white in light color scheme and theme.colors.dark[9] in dark"
      },
      "data": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "exact",
                "value": {
                  "label": {
                    "name": "string",
                    "description": "The option's label",
                    "required": true
                  },
                  "value": {
                    "name": "string",
                    "description": "Option's value",
                    "required": true
                  }
                }
              }
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "string"
              }
            }
          ]
        },
        "required": true,
        "description": "Data based on which controls are rendered"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disabled input state"
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "True if component should have 100% width"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "orientation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"horizontal\"",
              "computed": false
            },
            {
              "value": "\"vertical\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Display Vertically or horizontally"
      },
      "persistence": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If `persisted` is truthy and\nhasn't changed from its previous value, a `value` that the user has\nchanged while using the app will keep that change, as long as\nthe new `value` also matches what was given originally.\nUsed in conjunction with `persistence_type`."
      },
      "persisted_props": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "enum",
            "value": [
              {
                "value": "\"value\"",
                "computed": false
              }
            ]
          }
        },
        "required": false,
        "description": "Properties whose user interactions will persist after refreshing the\ncomponent or the page.",
        "defaultValue": {
          "value": "[\"value\"]",
          "computed": false
        }
      },
      "persistence_type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"local\"",
              "computed": false
            },
            {
              "value": "\"session\"",
              "computed": false
            },
            {
              "value": "\"memory\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.",
        "defaultValue": {
          "value": "\"local\"",
          "computed": false
        }
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Border-radius from theme or number to set border-radius in px"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Controls font-size, paddings and height"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Transition duration in ms, set to 0 to turn off transitions"
      },
      "transitionTimingFunction": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transition timing function for all transitions, defaults to theme.transitionTimingFunction"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Current selected value"
      }
    }
  },
  "src/lib/components/Select.react.js": {
    "description": "Custom searchable select. For more information, see: https://mantine.dev/core/select/",
    "displayName": "Select",
    "methods": [],
    "props": {
      "allowDeselect": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allow deselecting items on click"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "clearable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allow to clear value"
      },
      "creatable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allow creatable option"
      },
      "data": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "exact",
                "value": {
                  "label": {
                    "name": "string",
                    "description": "The option's label",
                    "required": true
                  },
                  "value": {
                    "name": "string",
                    "description": "Option's value",
                    "required": true
                  },
                  "disabled": {
                    "name": "bool",
                    "description": "If true, this option is disabled and cannot be selected",
                    "required": false
                  },
                  "group": {
                    "name": "string",
                    "description": "Item Groups",
                    "required": false
                  }
                }
              }
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "string"
              }
            }
          ]
        },
        "required": false,
        "description": "Select options used to renderer items in dropdown",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "description": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Input description, displayed after label"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "The component can show it is currently unable to be interacted with"
      },
      "dropdownPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"bottom\"",
              "computed": false
            },
            {
              "value": "\"top\"",
              "computed": false
            },
            {
              "value": "\"flip\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Dropdown positioning behavior"
      },
      "error": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Displays error message after input"
      },
      "icon": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Adds icon on the left side of input"
      },
      "iconWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of icon section in px"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "initiallyOpened": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Initial dropdown opened state"
      },
      "label": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Input label, displayed before input"
      },
      "limit": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Limit amount of items displayed at a time for searchable select"
      },
      "maxDropdownHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Maximum dropdown height in px"
      },
      "nothingFound": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Nothing found label"
      },
      "persistence": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If `persisted` is truthy and\nhasn't changed from its previous value, a `value` that the user has\nchanged while using the app will keep that change, as long as\nthe new `value` also matches what was given originally.\nUsed in conjunction with `persistence_type`."
      },
      "persisted_props": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "enum",
            "value": [
              {
                "value": "\"value\"",
                "computed": false
              }
            ]
          }
        },
        "required": false,
        "description": "Properties whose user interactions will persist after refreshing the\ncomponent or the page.",
        "defaultValue": {
          "value": "[\"value\"]",
          "computed": false
        }
      },
      "persistence_type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"local\"",
              "computed": false
            },
            {
              "value": "\"session\"",
              "computed": false
            },
            {
              "value": "\"memory\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.",
        "defaultValue": {
          "value": "\"local\"",
          "computed": false
        }
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Placeholder, displayed when date is not selected"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Input border-radius from theme or number to set border-radius in px"
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Adds red asterisk on the right side of label"
      },
      "rightSection": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Right section of input, similar to icon but on the right"
      },
      "rightSectionWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of right section, is used to calculate input padding-right"
      },
      "searchable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set to true to enable search"
      },
      "selectOnBlur": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Select highlighted item on blur"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "shadow": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Dropdown shadow from theme or any value to set box-shadow"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Input size"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "switchDirectionOnFlip": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to switch item order and keyboard navigation on dropdown position flip"
      },
      "transition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"fade\"",
              "computed": false
            },
            {
              "value": "\"skew-up\"",
              "computed": false
            },
            {
              "value": "\"skew-down\"",
              "computed": false
            },
            {
              "value": "\"rotate-right\"",
              "computed": false
            },
            {
              "value": "\"rotate-left\"",
              "computed": false
            },
            {
              "value": "\"slide-down\"",
              "computed": false
            },
            {
              "value": "\"slide-up\"",
              "computed": false
            },
            {
              "value": "\"slide-right\"",
              "computed": false
            },
            {
              "value": "\"slide-left\"",
              "computed": false
            },
            {
              "value": "\"scale-y\"",
              "computed": false
            },
            {
              "value": "\"scale-x\"",
              "computed": false
            },
            {
              "value": "\"scale\"",
              "computed": false
            },
            {
              "value": "\"pop\"",
              "computed": false
            },
            {
              "value": "\"pop-top-left\"",
              "computed": false
            },
            {
              "value": "\"pop-top-right\"",
              "computed": false
            },
            {
              "value": "\"pop-bottom-left\"",
              "computed": false
            },
            {
              "value": "\"pop-bottom-right\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Dropdown appear/disappear transition"
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Dropdown appear/disappear transition duration"
      },
      "transitionTimingFunction": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Dropdown body transition timing function, defaults to theme.transitionTimingFunction"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Selected value"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"default\"",
              "computed": false
            },
            {
              "value": "\"filled\"",
              "computed": false
            },
            {
              "value": "\"unstyled\"",
              "computed": false
            },
            {
              "value": "\"headless\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark"
      },
      "zIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Dropdown z-index"
      }
    }
  },
  "src/lib/components/SimpleGrid.react.js": {
    "description": "Responsive grid where each item takes equal amount of space. For more information, see: https://mantine.dev/core/simple-grid/",
    "displayName": "SimpleGrid",
    "methods": [],
    "props": {
      "breakpoints": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "exact",
            "value": {
              "maxWidth": {
                "name": "union",
                "value": [
                  {
                    "name": "enum",
                    "value": [
                      {
                        "value": "\"xs\"",
                        "computed": false
                      },
                      {
                        "value": "\"sm\"",
                        "computed": false
                      },
                      {
                        "value": "\"md\"",
                        "computed": false
                      },
                      {
                        "value": "\"lg\"",
                        "computed": false
                      },
                      {
                        "value": "\"xl\"",
                        "computed": false
                      }
                    ]
                  },
                  {
                    "name": "number"
                  }
                ],
                "required": false
              },
              "cols": {
                "name": "number",
                "required": true
              },
              "spacing": {
                "name": "union",
                "value": [
                  {
                    "name": "enum",
                    "value": [
                      {
                        "value": "\"xs\"",
                        "computed": false
                      },
                      {
                        "value": "\"sm\"",
                        "computed": false
                      },
                      {
                        "value": "\"md\"",
                        "computed": false
                      },
                      {
                        "value": "\"lg\"",
                        "computed": false
                      },
                      {
                        "value": "\"xl\"",
                        "computed": false
                      }
                    ]
                  },
                  {
                    "name": "number"
                  }
                ],
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "Breakpoints data to change items per row and spacing based on max-width"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Children"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "cols": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "Default amount of columns, used when none of breakpoints can be applied"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "spacing": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Default spacing between columns, used when none of breakpoints can be applied"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      }
    }
  },
  "src/lib/components/Skeleton.react.js": {
    "description": "Indicate content loading state. For more information, see: https://mantine.dev/core/skeleton/",
    "displayName": "Skeleton",
    "methods": [],
    "props": {
      "animate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show the animation effect"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Primary content"
      },
      "circle": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If Skeleton is a circle, it's width and border-radius will be equal to height"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Skeleton height"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Radius from theme.radius or number to set border-radius in px"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "visible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Should skeleton overlay be displayed",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Skeleton width"
      }
    }
  },
  "src/lib/components/Slider.react.js": {
    "description": "Capture user feedback from a range of values. For more information, see: https://mantine.dev/core/slider/",
    "displayName": "Slider",
    "methods": [],
    "props": {
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Slider color"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disables slider"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "labelAlwaysOn": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true label will be not be hidden when user stops dragging"
      },
      "labelTransition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"fade\"",
              "computed": false
            },
            {
              "value": "\"skew-up\"",
              "computed": false
            },
            {
              "value": "\"skew-down\"",
              "computed": false
            },
            {
              "value": "\"rotate-right\"",
              "computed": false
            },
            {
              "value": "\"rotate-left\"",
              "computed": false
            },
            {
              "value": "\"slide-down\"",
              "computed": false
            },
            {
              "value": "\"slide-up\"",
              "computed": false
            },
            {
              "value": "\"slide-right\"",
              "computed": false
            },
            {
              "value": "\"slide-left\"",
              "computed": false
            },
            {
              "value": "\"scale-y\"",
              "computed": false
            },
            {
              "value": "\"scale-x\"",
              "computed": false
            },
            {
              "value": "\"scale\"",
              "computed": false
            },
            {
              "value": "\"pop\"",
              "computed": false
            },
            {
              "value": "\"pop-top-left\"",
              "computed": false
            },
            {
              "value": "\"pop-top-right\"",
              "computed": false
            },
            {
              "value": "\"pop-bottom-left\"",
              "computed": false
            },
            {
              "value": "\"pop-bottom-right\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Label appear/disappear transition"
      },
      "labelTransitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Label appear/disappear transition duration in ms"
      },
      "labelTransitionTimingFunction": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Label appear/disappear transition timing function, defaults to theme.transitionRimingFunction"
      },
      "marks": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "exact",
            "value": {
              "label": {
                "name": "string",
                "description": "The option's label",
                "required": false
              },
              "value": {
                "name": "number",
                "description": "option's value",
                "required": true
              }
            }
          }
        },
        "required": false,
        "description": "Marks which will be placed on the track"
      },
      "max": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Maximum possible value"
      },
      "min": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Minimal possible value"
      },
      "persistence": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If `persisted` is truthy and\nhasn't changed from its previous value, a `value` that the user has\nchanged while using the app will keep that change, as long as\nthe new `value` also matches what was given originally.\nUsed in conjunction with `persistence_type`."
      },
      "persisted_props": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "enum",
            "value": [
              {
                "value": "\"value\"",
                "computed": false
              }
            ]
          }
        },
        "required": false,
        "description": "Properties whose user interactions will persist after refreshing the\ncomponent or the page.",
        "defaultValue": {
          "value": "[\"value\"]",
          "computed": false
        }
      },
      "persistence_type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"local\"",
              "computed": false
            },
            {
              "value": "\"session\"",
              "computed": false
            },
            {
              "value": "\"memory\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.",
        "defaultValue": {
          "value": "\"local\"",
          "computed": false
        }
      },
      "precision": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Amount of digits after the decimal point"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Track border-radius from theme or number to set border-radius in px"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "showLabelOnHover": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true slider label will appear on hover"
      },
      "size": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Predefined track and thumb size, number to set sizes in px"
      },
      "step": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number by which value will be incremented/decremented with thumb drag and arrows"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "thumbChildren": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Thumb children, can be used to add icon"
      },
      "updatemode": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"mouseup\"",
              "computed": false
            },
            {
              "value": "\"drag\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Determines when the component should update its value property. If mouseup (the default) then the slider will only trigger its value when the user has finished dragging the slider. If drag, then the slider will update its value continuously as it is being dragged.",
        "defaultValue": {
          "value": "\"mouseup\"",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Current value for controlled slider"
      }
    }
  },
  "src/lib/components/Space.react.js": {
    "description": "Add horizontal or vertical spacing from theme. For more information, see: https://mantine.dev/core/space/",
    "displayName": "Space",
    "methods": [],
    "props": {
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "h": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Height, set to add vertical spacing"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "w": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Width, set to add horizontal spacing"
      }
    }
  },
  "src/lib/components/Spoiler.react.js": {
    "description": "Hide long sections of content under spoiler. For more information, see: https://mantine.dev/core/spoiler/",
    "displayName": "Spoiler",
    "methods": [],
    "props": {
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Primary content"
      },
      "hideLabel": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Label for close spoiler action"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "initialState": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Initial spoiler state, true to wrap content in spoiler, false to show content without spoiler, opened state will be updated on mount"
      },
      "maxHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Max height of visible content, when this point is reached spoiler appears"
      },
      "showLabel": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Label for open spoiler action"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Spoiler reveal transition duration in ms, 0 or null to turn off animation"
      }
    }
  },
  "src/lib/components/Stack.react.js": {
    "description": "Compose elements and components in vertical flex container. For more information, see: https://mantine.dev/core/Stack/",
    "displayName": "Stack",
    "methods": [],
    "props": {
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"stretch\"",
              "computed": false
            },
            {
              "value": "\"center\"",
              "computed": false
            },
            {
              "value": "\"flex-end\"",
              "computed": false
            },
            {
              "value": "\"flex-start\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Sets text-align css property"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Primary content inside the stack"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "justify": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"space-between\"",
              "computed": false
            },
            {
              "value": "\"space-around\"",
              "computed": false
            },
            {
              "value": "\"center\"",
              "computed": false
            },
            {
              "value": "\"flex-end\"",
              "computed": false
            },
            {
              "value": "\"flex-start\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Set grid justify-content property"
      },
      "spacing": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Spacing between children"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style"
      }
    }
  },
  "src/lib/components/Switch.react.js": {
    "description": "Capture user feedback limited to small set of options. For more information, see: https://mantine.dev/core/switch/",
    "displayName": "Switch",
    "methods": [],
    "props": {
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Checkbox color"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "A checkbox can show it is currently unable to be interacted with"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "label": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Checkbox label"
      },
      "offLabel": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The inner label to be set when Switch is in an unchecked state"
      },
      "onLabel": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The inner label to be set when Switch is in the checked state"
      },
      "persistence": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If `persisted` is truthy and\nhasn't changed from its previous value, a `value` that the user has\nchanged while using the app will keep that change, as long as\nthe new `value` also matches what was given originally.\nUsed in conjunction with `persistence_type`."
      },
      "persisted_props": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "enum",
            "value": [
              {
                "value": "\"checked\"",
                "computed": false
              }
            ]
          }
        },
        "required": false,
        "description": "Properties whose user interactions will persist after refreshing the\ncomponent or the page.",
        "defaultValue": {
          "value": "[\"checked\"]",
          "computed": false
        }
      },
      "persistence_type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"local\"",
              "computed": false
            },
            {
              "value": "\"session\"",
              "computed": false
            },
            {
              "value": "\"memory\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.",
        "defaultValue": {
          "value": "\"local\"",
          "computed": false
        }
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Predefined border-radius value from theme.radius or number for border-radius in px"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Predefined label font-size and checkbox width and height in px"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "checked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "State of check box",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Tab.react.js": {
    "description": "Utility component to pass to Tabs. For more information, see: https://mantine.dev/core/tabs/",
    "displayName": "Tab",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Tab content"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "A tab can show it is currently unable to be interacted with"
      },
      "icon": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Icon"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "label": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Tab control label"
      }
    }
  },
  "src/lib/components/Table.react.js": {
    "description": "A simple table component. For more information, see: https://mantine.dev/core/table/",
    "displayName": "Table",
    "methods": [],
    "props": {
      "captionSide": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"bottom\"",
              "computed": false
            },
            {
              "value": "\"top\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Table caption position"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Component children, specifically an HTML representation of the table"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "fontSize": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Sets font size of all text inside table"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "highlightOnHover": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true row will have hover color"
      },
      "horizontalSpacing": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Horizontal cells spacing from theme.spacing or number to set value in px"
      },
      "striped": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true every odd row of table will have gray background color"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "verticalSpacing": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Vertical cells spacing from theme.spacing or number to set value in px"
      }
    }
  },
  "src/lib/components/Tabs.react.js": {
    "description": "Switch between different views. For more information, see: https://mantine.dev/core/tabs/",
    "displayName": "Tabs",
    "methods": [],
    "props": {
      "active": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Index of active tab, overrides internal state"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "<Tab /> components only"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Active tab color from theme.colors"
      },
      "grow": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "True if tabs should take all available space"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "orientation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"horizontal\"",
              "computed": false
            },
            {
              "value": "\"vertical\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Controls tab orientation"
      },
      "persistence": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If `persisted` is truthy and\nhasn't changed from its previous value, a `value` that the user has\nchanged while using the app will keep that change, as long as\nthe new `value` also matches what was given originally.\nUsed in conjunction with `persistence_type`."
      },
      "persisted_props": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "enum",
            "value": [
              {
                "value": "\"value\"",
                "computed": false
              }
            ]
          }
        },
        "required": false,
        "description": "Properties whose user interactions will persist after refreshing the\ncomponent or the page.",
        "defaultValue": {
          "value": "[\"value\"]",
          "computed": false
        }
      },
      "persistence_type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"local\"",
              "computed": false
            },
            {
              "value": "\"session\"",
              "computed": false
            },
            {
              "value": "\"memory\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.",
        "defaultValue": {
          "value": "\"local\"",
          "computed": false
        }
      },
      "position": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"right\"",
              "computed": false
            },
            {
              "value": "\"center\"",
              "computed": false
            },
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"apart\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Tab controls position"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "tabPadding": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Controls tab content padding-top"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"default\"",
              "computed": false
            },
            {
              "value": "\"outline\"",
              "computed": false
            },
            {
              "value": "\"pills\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Controls appearance"
      }
    }
  },
  "src/lib/components/Text.react.js": {
    "description": "Render text and links with theme styles. For more information, see: https://mantine.dev/core/text/",
    "displayName": "Text",
    "methods": [],
    "props": {
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"right\"",
              "computed": false
            },
            {
              "value": "\"center\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Sets text-align css property"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Primary content"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            },
            {
              "value": "\"dimmed\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Text color from theme"
      },
      "gradient": {
        "type": {
          "name": "exact",
          "value": {
            "from": {
              "name": "string",
              "required": true
            },
            "to": {
              "name": "string",
              "required": true
            },
            "deg": {
              "name": "number",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Controls gradient settings in gradient variant only"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "inherit": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Inherit font properties from parent element"
      },
      "inline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Sets line-height to 1 for centering"
      },
      "lineClamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "CSS -webkit-line-clamp property"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Predefined font-size from theme.fontSizes"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "transform": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"capitalize\"",
              "computed": false
            },
            {
              "value": "\"uppercase\"",
              "computed": false
            },
            {
              "value": "\"lowercase\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Sets text-transform css property"
      },
      "underline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Underline the text"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"link\"",
              "computed": false
            },
            {
              "value": "\"gradient\"",
              "computed": false
            },
            {
              "value": "\"text\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Link or text variant"
      },
      "weight": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"normal\"",
                  "computed": false
                },
                {
                  "value": "\"bold\"",
                  "computed": false
                },
                {
                  "value": "\"bolder\"",
                  "computed": false
                },
                {
                  "value": "\"lighter\"",
                  "computed": false
                },
                {
                  "value": "\"initial\"",
                  "computed": false
                },
                {
                  "value": "\"inherit\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Sets font-weight css property"
      }
    }
  },
  "src/lib/components/TextInput.react.js": {
    "description": "Custom input with label and description. For more information, see: https://mantine.dev/core/text-input/",
    "displayName": "TextInput",
    "methods": [],
    "props": {
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "description": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Input description, displayed after label"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "The component can show it is currently unable to be interacted with"
      },
      "error": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Displays error message after input"
      },
      "icon": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Adds icon on the left side of input"
      },
      "iconWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of icon section in px"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "label": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Input label, displayed before input"
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Placeholder, displayed when date is not selected"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Input border-radius from theme or number to set border-radius in px"
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Adds red asterisk on the right side of label"
      },
      "rightSection": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Right section of input, similar to icon but on the right"
      },
      "rightSectionWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of right section, is used to calculate input padding-right"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Input size"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"number\"",
              "computed": false
            },
            {
              "value": "\"search\"",
              "computed": false
            },
            {
              "value": "\"text\"",
              "computed": false
            },
            {
              "value": "\"tel\"",
              "computed": false
            },
            {
              "value": "\"url\"",
              "computed": false
            },
            {
              "value": "\"email\"",
              "computed": false
            },
            {
              "value": "\"password\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Input element type"
      },
      "value": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Input value",
        "defaultValue": {
          "value": "\"\"",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"default\"",
              "computed": false
            },
            {
              "value": "\"filled\"",
              "computed": false
            },
            {
              "value": "\"unstyled\"",
              "computed": false
            },
            {
              "value": "\"headless\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark"
      }
    }
  },
  "src/lib/components/Textarea.react.js": {
    "description": "Renders textarea with optional autosize variant. For more information, see: https://mantine.dev/core/Textarea/",
    "displayName": "Textarea",
    "methods": [],
    "props": {
      "autosize": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true Textarea will grow with content until maxRows are reached"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "description": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Input description, displayed after label"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "The component can show it is currently unable to be interacted with"
      },
      "error": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Displays error message after input"
      },
      "icon": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Adds icon on the left side of input"
      },
      "iconWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of icon section in px"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "label": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Input label, displayed before input"
      },
      "maxRows": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Defines maxRows in autosize variant, not applicable to regular variant"
      },
      "minRows": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Defined minRows in autosize variant and rows in regular variant"
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Placeholder, displayed when date is not selected"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Input border-radius from theme or number to set border-radius in px"
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Adds red asterisk on the right side of label"
      },
      "rightSection": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Right section of input, similar to icon but on the right"
      },
      "rightSectionWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of right section, is used to calculate input padding-right"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Input size"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "value": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Input value",
        "defaultValue": {
          "value": "\"\"",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"default\"",
              "computed": false
            },
            {
              "value": "\"filled\"",
              "computed": false
            },
            {
              "value": "\"unstyled\"",
              "computed": false
            },
            {
              "value": "\"headless\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark"
      }
    }
  },
  "src/lib/components/ThemeIcon.react.js": {
    "description": "Render icon inside element with theme colors. For more information, see: https://mantine.dev/core/theme-icon/",
    "displayName": "ThemeIcon",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Component children"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Icon color from theme"
      },
      "gradient": {
        "type": {
          "name": "exact",
          "value": {
            "from": {
              "name": "string",
              "required": false
            },
            "to": {
              "name": "string",
              "required": false
            },
            "deg": {
              "name": "number",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Controls gradient settings in gradient variant only"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Predefined border-radius from theme.radius or number for border-radius in px"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "size": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Predefined width and height or number for width and height in px"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"filled\"",
              "computed": false
            },
            {
              "value": "\"light\"",
              "computed": false
            },
            {
              "value": "\"gradient\"",
              "computed": false
            },
            {
              "value": "\"outline\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Controls appearance"
      }
    }
  },
  "src/lib/components/ThemeSwitcher.react.js": {
    "description": "Theme switcher for dmc-docs. For more information, see: https://mantine.dev/core/action-icon/",
    "displayName": "ThemeSwitcher",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "value": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"light\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "color scheme",
        "defaultValue": {
          "value": "\"light\"",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/TimeInput.react.js": {
    "description": "Capture time input from user. For more information, see: https://mantine.dev/dates/time-input/",
    "displayName": "TimeInput",
    "methods": [],
    "props": {
      "amPmPlaceholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Placeholder for am/pm input"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "clearable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allow to clear item"
      },
      "description": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Input description, displayed after label [PropTypes.node]"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disabled input state"
      },
      "error": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Displays error message after input [PropTypes.node]"
      },
      "format": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"12\"",
              "computed": false
            },
            {
              "value": "\"24\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Time format"
      },
      "icon": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Adds icon on the left side of input [PropTypes.node]"
      },
      "iconWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of icon section in px"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "label": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Input label, displayed before input [PropTypes.node]"
      },
      "persistence": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If `persisted` is truthy and\nhasn't changed from its previous value, a `value` that the user has\nchanged while using the app will keep that change, as long as\nthe new `value` also matches what was given originally.\nUsed in conjunction with `persistence_type`."
      },
      "persisted_props": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "enum",
            "value": [
              {
                "value": "\"value\"",
                "computed": false
              }
            ]
          }
        },
        "required": false,
        "description": "Properties whose user interactions will persist after refreshing the\ncomponent or the page.",
        "defaultValue": {
          "value": "[\"value\"]",
          "computed": false
        }
      },
      "persistence_type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"local\"",
              "computed": false
            },
            {
              "value": "\"session\"",
              "computed": false
            },
            {
              "value": "\"memory\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.",
        "defaultValue": {
          "value": "\"local\"",
          "computed": false
        }
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Input border-radius from theme or number to set border-radius in px"
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Adds red asterisk on the right side of label"
      },
      "rightSection": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Right section of input, similar to icon but on the right [PropTypes.node]"
      },
      "rightSectionWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of right section, is used to calculate input padding-right"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Tells dash if any prop has changed its value"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Input size"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "timePlaceholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Placeholder for hours/minutes/seconds inputs"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Value for controlled input"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"default\"",
              "computed": false
            },
            {
              "value": "\"filled\"",
              "computed": false
            },
            {
              "value": "\"unstyled\"",
              "computed": false
            },
            {
              "value": "\"headless\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark"
      },
      "withSeconds": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display seconds input"
      }
    }
  },
  "src/lib/components/Timeline.react.js": {
    "description": "Display list of events in chronological order. For more information, see: https://mantine.dev/core/timeline/",
    "displayName": "Timeline",
    "methods": [],
    "props": {
      "active": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Index of active element"
      },
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"right\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Timeline alignment"
      },
      "bulletSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Bullet size in px"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "dmc.TimelineItem components only"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Active color from theme"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "lineWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Line width in px"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Radius from theme.radius, or number to set border-radius in px"
      },
      "reverseActive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Reverse active direction without reversing items"
      }
    }
  },
  "src/lib/components/TimelineItem.react.js": {
    "description": "Display list of events in chronological order. For more information, see: https://mantine.dev/core/timeline/",
    "displayName": "TimelineItem",
    "methods": [],
    "props": {
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"right\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Line and bullet position relative to item content, controlled by Timeline component"
      },
      "bullet": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Bullet size in px"
      },
      "bulletSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Bullet size in px"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "React node that will be rendered after title"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Active color from theme"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "lineVariant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dashed\"",
              "computed": false
            },
            {
              "value": "\"dotted\"",
              "computed": false
            },
            {
              "value": "\"solid\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Line border style"
      },
      "lineWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Line border width in px, controlled by Timeline component"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Radius from theme.radius, or number to set border-radius in px"
      },
      "title": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Item title, rendered next to bullet"
      }
    }
  },
  "src/lib/components/Title.react.js": {
    "description": "h1-h6 headings. For more information, see: https://mantine.dev/core/title/",
    "displayName": "Title",
    "methods": [],
    "props": {
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"right\"",
              "computed": false
            },
            {
              "value": "\"center\"",
              "computed": false
            },
            {
              "value": "\"justify\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Sets text-align css property"
      },
      "children": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Primary content"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "order": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Defines component and styles which will be used"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      }
    }
  },
  "src/lib/components/Tooltip.react.js": {
    "description": "Renders tooltip at given element on mouse over or any other event. For more information, see: https://mantine.dev/core/tooltip/",
    "displayName": "Tooltip",
    "methods": [],
    "props": {
      "arrowDistance": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Arrow distance to the left/right * arrowSize"
      },
      "arrowSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Arrow size in px"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Any react node that should trigger tooltip"
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "closeDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Close delay in ms, 0 to disable delay"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dark\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"pink\"",
              "computed": false
            },
            {
              "value": "\"grape\"",
              "computed": false
            },
            {
              "value": "\"violet\"",
              "computed": false
            },
            {
              "value": "\"indigo\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"lime\"",
              "computed": false
            },
            {
              "value": "\"yellow\"",
              "computed": false
            },
            {
              "value": "\"orange\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Any color from theme.colors, defaults to gray in light color scheme and dark in dark colors scheme"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "True to disable tooltip"
      },
      "exitTransitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Unmount transition duration in ms"
      },
      "gutter": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Spacing between element and popper in px"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components in callbacks"
      },
      "label": {
        "type": {
          "name": "any"
        },
        "required": true,
        "description": "Tooltip content"
      },
      "openDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Open delay in ms, 0 to disable delay"
      },
      "opened": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Tooltip opened state for controlled variant"
      },
      "placement": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"center\"",
              "computed": false
            },
            {
              "value": "\"end\"",
              "computed": false
            },
            {
              "value": "\"start\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Placement relative to reference element"
      },
      "position": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"bottom\"",
              "computed": false
            },
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"right\"",
              "computed": false
            },
            {
              "value": "\"top\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Position relative to reference element"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"xs\"",
                  "computed": false
                },
                {
                  "value": "\"sm\"",
                  "computed": false
                },
                {
                  "value": "\"md\"",
                  "computed": false
                },
                {
                  "value": "\"lg\"",
                  "computed": false
                },
                {
                  "value": "\"xl\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Radius from theme.radius, or number to set border-radius in px"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Inline style override"
      },
      "transition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"fade\"",
              "computed": false
            },
            {
              "value": "\"skew-up\"",
              "computed": false
            },
            {
              "value": "\"skew-down\"",
              "computed": false
            },
            {
              "value": "\"rotate-right\"",
              "computed": false
            },
            {
              "value": "\"rotate-left\"",
              "computed": false
            },
            {
              "value": "\"slide-down\"",
              "computed": false
            },
            {
              "value": "\"slide-up\"",
              "computed": false
            },
            {
              "value": "\"slide-right\"",
              "computed": false
            },
            {
              "value": "\"slide-left\"",
              "computed": false
            },
            {
              "value": "\"scale-y\"",
              "computed": false
            },
            {
              "value": "\"scale-x\"",
              "computed": false
            },
            {
              "value": "\"scale\"",
              "computed": false
            },
            {
              "value": "\"pop\"",
              "computed": false
            },
            {
              "value": "\"pop-top-left\"",
              "computed": false
            },
            {
              "value": "\"pop-top-right\"",
              "computed": false
            },
            {
              "value": "\"pop-bottom-left\"",
              "computed": false
            },
            {
              "value": "\"pop-bottom-right\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Customize mount/unmount transition"
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Mount transition duration in ms"
      },
      "transitionTimingFunction": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Mount/unmount transition timing function, defaults to theme.transitionTimingFunction"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"auto\"",
                  "computed": false
                }
              ]
            }
          ]
        },
        "required": false,
        "description": "Tooltip width in px or auto"
      },
      "withArrow": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Renders arrow if true"
      },
      "wrapLines": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allow multiline tooltip content"
      },
      "zIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Popper z-index"
      }
    }
  }
}